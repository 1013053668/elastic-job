<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>01-starts on </title>
    <link>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite-1.x/01-start/</link>
    <description>Recent content in 01-starts on </description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 02 Dec 2016 16:06:17 +0800</lastBuildDate>
    
	<atom:link href="http://dangdangdotcom.github.io/elastic-job/elastic-job-lite-1.x/01-start/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>起航</title>
      <link>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite-1.x/01-start/index/</link>
      <pubDate>Fri, 02 Dec 2016 16:06:17 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite-1.x/01-start/index/</guid>
      <description> 本章导航  如果想快速体验Elastic-Job的强大功能，请阅读快速入门。 如果在使用中遇到什么问题，请首先在FAQ中寻找解决问题的答案。 想要在自己的项目中集成Elastic-Job,您一定很关心它如何开发及如何部署。  </description>
    </item>
    
    <item>
      <title>快速上手</title>
      <link>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite-1.x/01-start/quick-start/</link>
      <pubDate>Thu, 06 Apr 2017 22:38:50 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite-1.x/01-start/quick-start/</guid>
      <description>下载源码和文档 https://github.com/dangdangdotcom/elastic-job
选择 tags\1.1.0 作为源码
其中，需要用elastic-job-example来做应用例子，自行安装Zookeeper来做注册中心。
安装lombok 开发代码省略了 set get log等，需要安装此包才不会报错。
lombok的官方网址：http://projectlombok.org/
lombok安装
使用lombok是需要安装的，如果不安装，IDE则无法解析lombok注解。先在官网下载最新版本的JAR包，现在是0.11.2版本，我用的是0.11.0。第一次使用的时候我下载的是最新版本的，也就是我现在用的0.11.0，到现在已经更新了两个版本，更新的好快啊……
可以用以下两种方式安装：
 双击下载下来的JAR包安装lombok。 eclipse/myeclipse手动安装lombok。  将lombok.jar复制到myeclipse.ini/eclipse.ini所在的文件夹目录下 打开eclipse.ini/myeclipse.ini，在最后面插入以下两行并保存：   -Xbootclasspath/a:lombok.jar -javaagent:lombok.jar  最后重启eclipse/myeclipse
Zookeeper的安装和配置 参考资料：http://blog.csdn.net/shatelang/article/details/7596007
快速配置  下载解压到指定目录 配置bin：zkServer.cmd(zkServer.sh)，默认不需要修改，默认读zoo.cfg 配置conf：zoo.cfg（注意log dataDir目录须先建）  tickTime=2000 initLimit=10 syncLimit=5 dataDir=D:\\javawork\\zookeeper-3.4.6\\data dataLogDir=D:\\javawork\\zookeeper-3.4.6\\log clientPort=2181   启动：zkServer.cmd(zkServer.sh)，无报错。 验证：JPS，存在QuorumPeerMain为已启动；验证端口netstat -ano|findstr 2181   客户端命令  echo ruok|nc 127.0.0.1 2181 zkCli –server 127.0.0.1:2181 zkCli.cmd –server 127.0.0.1:2181 zkCli.cmd –server 127.0.0.1:2182 zkCli.cmd –server 127.0.0.1:2183 zkCli.cmd –server 127.</description>
    </item>
    
    <item>
      <title>FAQ</title>
      <link>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite-1.x/01-start/faq/</link>
      <pubDate>Wed, 27 Jan 2016 16:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite-1.x/01-start/faq/</guid>
      <description>1. 阅读源码时为什么会出现编译错误? 回答：
参见阅读源码编译问题说明
2. 使用Spring命名空间时在网上相应地址找不到xsd? 回答：
Spring命名空间使用规范并未强制要求将xsd文件部署至公网地址，因此我们并未将http://www.dangdang.com/schema/ddframe/reg/reg.xsd和http://www.dangdang.com/schema/ddframe/job/job.xsd部署至公网，但不影响正常使用。
elastic-job-lite-spring的jar包中META-INF\spring.schemas配置了xsd文件的位置：http\://www.dangdang.com/schema/ddframe/reg/reg.xsd=META-INF/namespace/reg.xsd http\://www.dangdang.com/schema/ddframe/job/job.xsd=META-INF/namespace/job.xsd，需确保jar包中该文件存在。
3. 为什么在代码或Spring配置文件中修改了作业配置，注册中心配置却没有更新? 回答：
Elastic-Job-Lite采用无中心化设计，若每个客户端的配置不一致，不做控制的话，最后一个启动的客户端配置将会成为注册中心的最终配置。
Elastic-Job-Lite提出了overwrite概念，可通过JobConfiguration或Spring命名空间配置。overwrite=true即允许客户端配置覆盖注册中心，反之则不允许。如果注册中心无相关作业的配置，则无论overwrite是否配置，客户端配置都将写入注册中心。
4. 怀疑Elastic-Job在分布式环境中有问题，但无法重现又不能在线上环境调试，应该怎么做? 回答：
分布式问题非常难于调试和重现，为此Elastic-Job提供了dump命令。
如果您怀疑某些场景出现问题，可参照dump文档将作业运行时信息发给我们、提交issue或发至QQ群讨论。我们已将IP等敏感信息过滤，dump出来的信息可在公网安全传输。
5. Elastic-Job有何使用限制? 回答：
 作业一旦启动成功后不能修改作业名称，如果修改名称则视为新的作业。
 同一台作业服务器只能运行一个相同的作业实例，因为作业运行时是按照IP注册和管理的。
 一旦有服务器波动，或者修改分片项，将会触发重新分片；触发重新分片将会导致运行中的流式处理的作业在执行完本次作业后不再继续执行，等待分片结束后再恢复正常。
 开启monitorExecution才能实现分布式作业幂等性（即不会在多个作业服务器运行同一个分片）的功能，但monitorExecution对短时间内执行的作业（如每5秒一触发）性能影响较大，建议关闭并自行实现幂等性。
  6. 是否支持动态添加作业? 回答：
动态添加作业这个概念每个人理解不尽相同。
elastic-job为jar包，由开发或运维人员负责启动。启动时自动向注册中心注册作业信息并进行分布式协调，因此并不需要手工在注册中心填写作业信息。 但注册中心与作业部署机无从属关系，注册中心并不能控制将单点的作业分发至其他作业机，也无法将远程服务器未启动的作业启动。elastic-job并不会包含ssh免密管理等功能。
综上所述，elastic-job已做了基本动态添加功能，但无法做到真正意义的完全自动化添加。
7. Zookeeper版本不是3.4.6会有什么问题? 回答：
根据测试，使用3.3.6版本的Zookeeper在使用Curator 2.10.0的CuratorTransactionFinal的commit时会导致死锁。</description>
    </item>
    
    <item>
      <title>开发指南</title>
      <link>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite-1.x/01-start/dev-guide/</link>
      <pubDate>Wed, 27 Jan 2016 16:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite-1.x/01-start/dev-guide/</guid>
      <description>代码开发 作业类型 目前提供3种作业类型，分别是Simple, DataFlow和Script。
DataFlow类型用于处理数据流，它又提供2种作业类型，分别是ThroughputDataFlow和SequenceDataFlow。需要继承相应的抽象类。
Script类型用于处理脚本，可直接使用，无需编码。
方法参数shardingContext包含作业配置，分片和运行时信息。可通过getShardingTotalCount(), getShardingItems()等方法分别获取分片总数，运行在本作业服务器的分片序列号集合等。
Simple类型作业 Simple类型作业意为简单实现，未经任何封装的类型。需要继承AbstractSimpleElasticJob，该类只提供了一个方法用于覆盖，此方法将被定时执行。用于执行普通的定时任务，与Quartz原生接口相似，只是增加了弹性扩缩容和分片等功能。
public class MyElasticJob extends AbstractSimpleElasticJob { @Override public void process(JobExecutionMultipleShardingContext context) { // do something by sharding items } }  ThroughputDataFlow类型作业 ThroughputDataFlow类型作业意为高吞吐的数据流作业。需要继承AbstractIndividualThroughputDataFlowElasticJob并可以指定返回值泛型，该类提供3个方法可覆盖，分别用于抓取数据，处理数据和指定是否流式处理数据。可以获取数据处理成功失败次数等辅助监控信息。如果流式处理数据，fetchData方法的返回值只有为null或长度为空时，作业才会停止执行，否则作业会一直运行下去；非流式处理数据则只会在每次作业执行过程中执行一次fetchData方法和processData方法，即完成本次作业。流式数据处理参照TbSchedule设计，适用于不间歇的数据处理。
作业执行时会将fetchData的数据传递给processData处理，其中processData得到的数据是通过多线程（线程池大小可配）拆分的。如果采用流式作业处理方式，建议processData处理数据后更新其状态，避免fetchData再次抓取到，从而使得作业永远不会停止。processData的返回值用于表示数据是否处理成功，抛出异常或者返回false将会在统计信息中归入失败次数，返回true则归入成功次数。
public class MyElasticJob extends AbstractIndividualThroughputDataFlowElasticJob&amp;lt;Foo&amp;gt; { @Override public List&amp;lt;Foo&amp;gt; fetchData(JobExecutionMultipleShardingContext context) { Map&amp;lt;Integer, String&amp;gt; offset = context.getOffsets(); List&amp;lt;Foo&amp;gt; result = // get data from database by sharding items and by offset return result; } @Override public boolean processData(JobExecutionMultipleShardingContext context, Foo data) { // process data // .</description>
    </item>
    
    <item>
      <title>部署指南</title>
      <link>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite-1.x/01-start/deploy-guide/</link>
      <pubDate>Wed, 27 Jan 2016 16:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite-1.x/01-start/deploy-guide/</guid>
      <description> 安装Java环境 请使用JDK1.7及其以上版本。详情参见
安装Zookeeper 请使用Zookeeper 3.4.6及其以上版本。详情参见。或使用elastic-job自带的内嵌Zookeeper
安装Maven 请使用Maven 3.0.4及其以上版本。详情参见
引入elastic-job &amp;lt;!-- 引入elastic-job核心模块 --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.dangdang&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;elastic-job-core&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${latest.release.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!-- 使用springframework自定义命名空间时引入 --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.dangdang&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;elastic-job-spring&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${latest.release.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt;  </description>
    </item>
    
  </channel>
</rss>