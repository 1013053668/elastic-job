<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Elastic-Job</title>
    <link>http://dangdangdotcom.github.io/elastic-job/</link>
    <description>Recent content on Elastic-Job</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://dangdangdotcom.github.io/elastic-job/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title></title>
      <link>http://dangdangdotcom.github.io/elastic-job/index/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/index/</guid>
      <description>

&lt;h1 id=&#34;elastic-job-distributed-scheduled-job-solution:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;&lt;strong&gt;Elastic-Job - distributed scheduled job solution&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0.html&#34;&gt;&lt;img src=&#34;http://dangdangdotcom.github.io/elastic-job/img/license.svg&#34; alt=&#34;Hex.pm&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;https://maven-badges.herokuapp.com/maven-central/com.dangdang/elastic-job&#34;&gt;&lt;img src=&#34;https://maven-badges.herokuapp.com/maven-central/com.dangdang/elastic-job/badge.svg&#34; alt=&#34;Maven Status&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;https://travis-ci.org/dangdangdotcom/elastic-job&#34;&gt;&lt;img src=&#34;https://secure.travis-ci.org/dangdangdotcom/elastic-job.png?branch=master&#34; alt=&#34;Build Status&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;https://coveralls.io/github/dangdangdotcom/elastic-job?branch=master&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/dangdangdotcom/elastic-job/badge.svg?branch=master&amp;amp;service=github&#34; alt=&#34;Coverage Status&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;概览:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;概览&lt;/h1&gt;

&lt;p&gt;Elastic-Job是一个分布式调度解决方案，由两个相互独立的子项目Elastic-Job-Lite和Elastic-Job-Cloud组成。&lt;/p&gt;

&lt;p&gt;Elastic-Job-Lite定位为轻量级无中心化解决方案，使用jar包的形式提供分布式任务的协调服务。
Elastic-Job-Cloud使用Mesos + Docker的解决方案，额外提供资源治理、应用分发以及进程隔离等服务。&lt;/p&gt;

&lt;p&gt;Elastic-Job-Lite和Elastic-Job-Cloud提供同一套API开发作业，开发者仅需一次开发，然后可根据需要以Lite或Cloud的方式部署。&lt;/p&gt;

&lt;h1 id=&#34;功能列表:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;功能列表&lt;/h1&gt;

&lt;h2 id=&#34;1-elastic-job-lite:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;1. Elastic-Job-Lite&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;分布式调度协调&lt;/li&gt;
&lt;li&gt;弹性扩容缩容&lt;/li&gt;
&lt;li&gt;失效转移&lt;/li&gt;
&lt;li&gt;错过执行作业重触发&lt;/li&gt;
&lt;li&gt;作业分片一致性，保证同一分片在分布式环境中仅一个执行实例&lt;/li&gt;
&lt;li&gt;支持并行调度&lt;/li&gt;
&lt;li&gt;支持作业声明周期操作&lt;/li&gt;
&lt;li&gt;丰富的作业类型&lt;/li&gt;
&lt;li&gt;Spring整合以及命名空间提供&lt;/li&gt;
&lt;li&gt;运维平台&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;2-elastic-job-cloud:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;2. Elastic-Job-Cloud&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;包含Elastic-Job-Lite的全部功能&lt;/li&gt;
&lt;li&gt;弹性资源分配&lt;/li&gt;
&lt;li&gt;应用自动分发&lt;/li&gt;
&lt;li&gt;基于Docker的进程隔离(TBD)&lt;/li&gt;
&lt;li&gt;Maven部署插件&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;release-notes-post-release-notes:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;&lt;a href=&#34;post/release_notes/&#34;&gt;Release Notes&lt;/a&gt;&lt;/h1&gt;

&lt;h1 id=&#34;architecture:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Architecture&lt;/h1&gt;

&lt;h2 id=&#34;elastic-job-lite:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Elastic-Job-Lite&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;img/architecture/elastic_job_lite.png&#34; alt=&#34;Elastic-Job-Lite Architecture&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;elastic-job-cloud:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Elastic-Job-Cloud&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;img/architecture/elastic_job_cloud.png&#34; alt=&#34;Elastic-Job-Cloud Architecture&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;quick-start:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Quick Start&lt;/h1&gt;

&lt;h2 id=&#34;elastic-job-lite-1:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Elastic-Job-Lite&lt;/h2&gt;

&lt;h3 id=&#34;引入maven依赖:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;引入maven依赖&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;!-- 引入elastic-job-lite核心模块 --&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;com.dangdang&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;elastic-job-lite-core&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;${latest.release.version}&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;

&amp;lt;!-- 使用springframework自定义命名空间时引入 --&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;com.dangdang&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;elastic-job-lite-spring&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;${latest.release.version}&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;作业开发:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;作业开发&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class MyElasticJob implements SimpleJob {
    
    @Override
    public void execute(ShardingContext context) {
        switch (context.getShardingItem()) {
            case 0: 
                // do something by sharding item 0
                break;
            case 1: 
                // do something by sharding item 1
                break;
            case 2: 
                // do something by sharding item 2
                break;
            // case n: ...
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;作业配置:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;作业配置&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;beans xmlns=&amp;quot;http://www.springframework.org/schema/beans&amp;quot;
    xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;
    xmlns:reg=&amp;quot;http://www.dangdang.com/schema/ddframe/reg&amp;quot;
    xmlns:job=&amp;quot;http://www.dangdang.com/schema/ddframe/job&amp;quot;
    xsi:schemaLocation=&amp;quot;http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans.xsd
                        http://www.dangdang.com/schema/ddframe/reg
                        http://www.dangdang.com/schema/ddframe/reg/reg.xsd
                        http://www.dangdang.com/schema/ddframe/job
                        http://www.dangdang.com/schema/ddframe/job/job.xsd
                        &amp;quot;&amp;gt;
    &amp;lt;!--配置作业注册中心 --&amp;gt;
    &amp;lt;reg:zookeeper id=&amp;quot;regCenter&amp;quot; server-lists=&amp;quot; yourhost:2181&amp;quot; namespace=&amp;quot;dd-job&amp;quot; base-sleep-time-milliseconds=&amp;quot;1000&amp;quot; max-sleep-time-milliseconds=&amp;quot;3000&amp;quot; max-retries=&amp;quot;3&amp;quot; /&amp;gt;
    
    &amp;lt;!-- 配置作业--&amp;gt;
    &amp;lt;job:simple id=&amp;quot;oneOffElasticJob&amp;quot; class=&amp;quot;xxx.MyElasticJob&amp;quot; registry-center-ref=&amp;quot;regCenter&amp;quot; cron=&amp;quot;0/10 * * * * ?&amp;quot; sharding-total-count=&amp;quot;3&amp;quot; sharding-item-parameters=&amp;quot;0=A,1=B,2=C&amp;quot; /&amp;gt;
&amp;lt;/beans&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;elastic-job-cloud-1:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Elastic-Job-Cloud&lt;/h2&gt;

&lt;h3 id=&#34;引入maven依赖-1:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;引入maven依赖&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;!-- 引入elastic-job-cloud执行器模块 --&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;com.dangdang&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;elastic-job-cloud-executor&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;${latest.release.version}&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;作业开发-1:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;作业开发&lt;/h3&gt;

&lt;p&gt;同&lt;code&gt;Elastic-Job-Lite&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;作业配置-1:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;作业配置&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;curl -l -H &amp;quot;Content-type: application/json&amp;quot; -X POST -d 
&#39;{&amp;quot;jobName&amp;quot;:&amp;quot;foo_job&amp;quot;,&amp;quot;jobClass&amp;quot;:&amp;quot;yourJobClass&amp;quot;,&amp;quot;jobType&amp;quot;:&amp;quot;SIMPLE&amp;quot;,&amp;quot;jobExecutionType&amp;quot;:&amp;quot;TRANSIENT&amp;quot;,&amp;quot;cron&amp;quot;:&amp;quot;0/5 * * * * ?&amp;quot;,&amp;quot;shardingTotalCount&amp;quot;:5,&amp;quot;cpuCount&amp;quot;:0.1,&amp;quot;memoryMB&amp;quot;:64.0,&amp;quot;appURL&amp;quot;:&amp;quot;http://app_host:8080/foo-job.tar.gz&amp;quot;,&amp;quot;failover&amp;quot;:true,&amp;quot;misfire&amp;quot;:true,&amp;quot;bootstrapScript&amp;quot;:&amp;quot;bin/start.sh&amp;quot;}&#39; 
http://elastic_job_cloud_host:8899/job/register
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;讨论QQ群：&lt;/strong&gt;430066234（不限于Elastic-Job，包括分布式，定时任务相关以及其他互联网技术交流。由于QQ群已接近饱和，我们希望您在申请加群之前仔细阅读文档，并在加群申请中正确回答问题，以及在申请时写上您的姓名和公司名称。并且在入群后及时修改群名片。否则我们将有权拒绝您的入群申请。谢谢合作。）&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Release Notes</title>
      <link>http://dangdangdotcom.github.io/elastic-job/post/release_notes/</link>
      <pubDate>Wed, 27 Jan 2016 16:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/post/release_notes/</guid>
      <description>

&lt;h1 id=&#34;release-notes:0e7a0379e76a8b6dfd2072d5a9672bab&#34;&gt;Release Notes&lt;/h1&gt;

&lt;h2 id=&#34;2-0-5-snapshot:0e7a0379e76a8b6dfd2072d5a9672bab&#34;&gt;2.0.5-SNAPSHOT&lt;/h2&gt;

&lt;h3 id=&#34;缺陷修正:0e7a0379e76a8b6dfd2072d5a9672bab&#34;&gt;缺陷修正&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/222&#34;&gt;ISSUE 222&lt;/a&gt; elastic-job-lite-spring的reg配置参数max-retries不起作用&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/231&#34;&gt;ISSUE 231&lt;/a&gt; 批量删除cloud作业时，mesos会提前同步TASK_LOST消息给framework，导致作业被重新放入ready队列并执行&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;新功能:0e7a0379e76a8b6dfd2072d5a9672bab&#34;&gt;新功能&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/217&#34;&gt;ISSUE #217&lt;/a&gt; cloud版本增加APP维度配置&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/223&#34;&gt;ISSUE #223&lt;/a&gt; cloud版本事件追踪采样率&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;2-0-4:0e7a0379e76a8b6dfd2072d5a9672bab&#34;&gt;2.0.4&lt;/h2&gt;

&lt;h3 id=&#34;缺陷修正-1:0e7a0379e76a8b6dfd2072d5a9672bab&#34;&gt;缺陷修正&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/189&#34;&gt;ISSUE #189&lt;/a&gt; 管理后台执行失效操作，但任务还在执行&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/204&#34;&gt;ISSUE #204&lt;/a&gt; 异步事件执行消息顺序不一致导致数据库数据不准确&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/209&#34;&gt;ISSUE #209&lt;/a&gt; cloud作业资源分配算法改进&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;新功能-1:0e7a0379e76a8b6dfd2072d5a9672bab&#34;&gt;新功能&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/203&#34;&gt;ISSUE #203&lt;/a&gt; cloud类型作业增加运行统计，并提供REST API查询&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/215&#34;&gt;ISSUE #215&lt;/a&gt; cloud版本运维管理界面&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;功能提升:0e7a0379e76a8b6dfd2072d5a9672bab&#34;&gt;功能提升&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/187&#34;&gt;ISSUE #187&lt;/a&gt; ShardingContext中增加taskId属性，供业务方使用&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;2-0-3:0e7a0379e76a8b6dfd2072d5a9672bab&#34;&gt;2.0.3&lt;/h2&gt;

&lt;h3 id=&#34;缺陷修正-2:0e7a0379e76a8b6dfd2072d5a9672bab&#34;&gt;缺陷修正&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/177&#34;&gt;ISSUE #177&lt;/a&gt; 2.0.2版本Spring命名空间的job:script空指针&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/185&#34;&gt;ISSUE #185&lt;/a&gt; Executor多占用分片资源导致资源浪费问题&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;新功能-2:0e7a0379e76a8b6dfd2072d5a9672bab&#34;&gt;新功能&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/178&#34;&gt;ISSUE #178&lt;/a&gt; 事件驱动触发作业&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;功能提升-1:0e7a0379e76a8b6dfd2072d5a9672bab&#34;&gt;功能提升&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/179&#34;&gt;ISSUE #179&lt;/a&gt; Transient的Script类型作业优化，无需Java的Executor支持&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/182&#34;&gt;ISSUE #182&lt;/a&gt; 增加对spring boot的支持&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;结构调整:0e7a0379e76a8b6dfd2072d5a9672bab&#34;&gt;结构调整&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/184&#34;&gt;ISSUE #184&lt;/a&gt; ExecutorServiceHandler接口方法调整，增加jobName区分用来区分不同作业线程名&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/186&#34;&gt;ISSUE #186&lt;/a&gt; 去除Spring命名空间DTO相关代码，简化SpringJobScheduler使用&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;2-0-2:0e7a0379e76a8b6dfd2072d5a9672bab&#34;&gt;2.0.2&lt;/h2&gt;

&lt;h3 id=&#34;缺陷修正-3:0e7a0379e76a8b6dfd2072d5a9672bab&#34;&gt;缺陷修正&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/64&#34;&gt;ISSUE #64&lt;/a&gt; Spring命名空间，若注册多个同Class的作业Bean，会导致作业Bean查找不准确&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/115&#34;&gt;ISSUE #115&lt;/a&gt; console新增注册中心，没有连接成功，后台一直反复连接并报错&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/151&#34;&gt;ISSUE #151&lt;/a&gt; 基于关系型数据库的事件追踪缺乏对MySQL之外数据库的支持&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/152&#34;&gt;ISSUE #152&lt;/a&gt; job自定义异常处理器无效，总是被DefaultJobExceptionHandler处理&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/156&#34;&gt;ISSUE #156&lt;/a&gt; 作业事件追踪整体调用链路数据采集&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/158&#34;&gt;ISSUE #158&lt;/a&gt; 作业在暂停时错过分片时机将不会再分片&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/161&#34;&gt;ISSUE #161&lt;/a&gt; Lite版本部署至某些版本的Tomcat无法启动&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/163&#34;&gt;ISSUE #163&lt;/a&gt; 任务设置disable＝true后，启动项目还是会自动执行任务&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/165&#34;&gt;ISSUE #165&lt;/a&gt; 所有服务节点都disable时会导致分片线程死锁&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/167&#34;&gt;ISSUE #167&lt;/a&gt; Failover作业增加源执行任务ID记录&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;功能提升-2:0e7a0379e76a8b6dfd2072d5a9672bab&#34;&gt;功能提升&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/159&#34;&gt;ISSUE #159&lt;/a&gt; 提供从Spring 3.1.0.REELASE至Spring 4任何版本的支持&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/164&#34;&gt;ISSUE #164&lt;/a&gt; 作业Spring命名空间中已声明的JobBean不需要再声明@Component或在Spring xml中定义&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;结构调整-1:0e7a0379e76a8b6dfd2072d5a9672bab&#34;&gt;结构调整&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/153&#34;&gt;ISSUE #153&lt;/a&gt; 事件追踪配置集中化&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/160&#34;&gt;ISSUE #160&lt;/a&gt; 调整maven模块结构，提供elastic-job-common及其二级模块，原elastic-job-core模块迁移至elastic-job-common-core&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;2-0-1:0e7a0379e76a8b6dfd2072d5a9672bab&#34;&gt;2.0.1&lt;/h2&gt;

&lt;h3 id=&#34;缺陷修正-4:0e7a0379e76a8b6dfd2072d5a9672bab&#34;&gt;缺陷修正&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/141&#34;&gt;ISSUE #141&lt;/a&gt; 删除reg模块从zk读取信息功能，使reg命名空间的placeholder完全可用&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/143&#34;&gt;ISSUE #143&lt;/a&gt; elastic-job-cloud-scheduler内存泄漏问题&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/145&#34;&gt;ISSUE #145&lt;/a&gt; 修改作业日志的数据库连接后日志还是会写入老的数据库&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/146&#34;&gt;ISSUE #146&lt;/a&gt; 作业的线程池复用问题&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/147&#34;&gt;ISSUE #147&lt;/a&gt; console作业维度加载不出来 后台有报空指针错误&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/149&#34;&gt;ISSUE #149&lt;/a&gt; 运维平台删除作业，偶尔会遇到删除不全的情况&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/150&#34;&gt;ISSUE #150&lt;/a&gt; Cloud的misfire功能在作业堆积时将会一直执行&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;2-0-0:0e7a0379e76a8b6dfd2072d5a9672bab&#34;&gt;2.0.0&lt;/h2&gt;

&lt;h3 id=&#34;新功能-3:0e7a0379e76a8b6dfd2072d5a9672bab&#34;&gt;新功能&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Elastic-Job-Cloud初始版本&lt;/li&gt;
&lt;li&gt;重构原Elastic-Job至Elastic-Job-Lite&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;缺陷修正-5:0e7a0379e76a8b6dfd2072d5a9672bab&#34;&gt;缺陷修正&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/119&#34;&gt;ISSUE #119&lt;/a&gt; spring容器关闭时，quartz未正常关闭&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/123&#34;&gt;ISSUE #123&lt;/a&gt; 单机跑定时任务，zk断开后重连，没有触发leader选举&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/127&#34;&gt;ISSUE #127&lt;/a&gt; Spring方式配置作业id无法使用占位符&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;1-1-1:0e7a0379e76a8b6dfd2072d5a9672bab&#34;&gt;1.1.1&lt;/h2&gt;

&lt;h3 id=&#34;结构调整-2:0e7a0379e76a8b6dfd2072d5a9672bab&#34;&gt;结构调整&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/116&#34;&gt;ISSUE #116&lt;/a&gt; 作业接口的handleJobExecutionException参数变更&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;功能提升-3:0e7a0379e76a8b6dfd2072d5a9672bab&#34;&gt;功能提升&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/110&#34;&gt;ISSUE #110&lt;/a&gt; 手动触发作业&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;缺陷修正-6:0e7a0379e76a8b6dfd2072d5a9672bab&#34;&gt;缺陷修正&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/99&#34;&gt;ISSUE #99&lt;/a&gt; 删除作业异步导致作业删除后, 还未结束的作业继续创建zk数据&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;1-1-0:0e7a0379e76a8b6dfd2072d5a9672bab&#34;&gt;1.1.0&lt;/h2&gt;

&lt;h3 id=&#34;结构调整-3:0e7a0379e76a8b6dfd2072d5a9672bab&#34;&gt;结构调整&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/97&#34;&gt;ISSUE #97&lt;/a&gt; JobConfiguration重构为SimpleJobConfiguration，DataflowJobConfiguration，ScriptJobConfiguration&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/102&#34;&gt;ISSUE #102&lt;/a&gt; 重新定义Java/Spring Config API，使用Factory+Builder模式代替原有的Constructor+Setter模式&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/104&#34;&gt;ISSUE #104&lt;/a&gt; 移除@Deprecated代码&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/105&#34;&gt;ISSUE #105&lt;/a&gt; 重构Spring命名空间驼峰式定义&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/106&#34;&gt;ISSUE #106&lt;/a&gt; isStreaming配置化&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/107&#34;&gt;ISSUE #107&lt;/a&gt; reg-center更名为registry-center-ref&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;1-0-8:0e7a0379e76a8b6dfd2072d5a9672bab&#34;&gt;1.0.8&lt;/h2&gt;

&lt;h3 id=&#34;新功能-4:0e7a0379e76a8b6dfd2072d5a9672bab&#34;&gt;新功能&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/95&#34;&gt;ISSUE #95&lt;/a&gt; 增加脚本类型作业支持&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;1-0-7:0e7a0379e76a8b6dfd2072d5a9672bab&#34;&gt;1.0.7&lt;/h2&gt;

&lt;h3 id=&#34;结构调整-4:0e7a0379e76a8b6dfd2072d5a9672bab&#34;&gt;结构调整&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/88&#34;&gt;ISSUE #88&lt;/a&gt; stop作业改名为pause&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;新功能-5:0e7a0379e76a8b6dfd2072d5a9672bab&#34;&gt;新功能&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/91&#34;&gt;ISSUE #91&lt;/a&gt; 作业生命周期操作API&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;功能提升-4:0e7a0379e76a8b6dfd2072d5a9672bab&#34;&gt;功能提升&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/84&#34;&gt;ISSUE #84&lt;/a&gt; 控制台提供作业启用/禁用按钮操作&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/87&#34;&gt;ISSUE #87&lt;/a&gt; 调整主节点选举流程，作业关闭，禁用和暂停将触发主节点选举&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/93&#34;&gt;ISSUE #93&lt;/a&gt; 注册中心配置提供baseSleepTimeMilliseconds、maxSleepTimeMilliseconds和maxRetries的默认值&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;缺陷修正-7:0e7a0379e76a8b6dfd2072d5a9672bab&#34;&gt;缺陷修正&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/92&#34;&gt;ISSUE #92&lt;/a&gt; 修改分片总数参数导致仅单一节点执行的监听抛出超时异常&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;1-0-6:0e7a0379e76a8b6dfd2072d5a9672bab&#34;&gt;1.0.6&lt;/h2&gt;

&lt;h3 id=&#34;功能提升-5:0e7a0379e76a8b6dfd2072d5a9672bab&#34;&gt;功能提升&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/71&#34;&gt;ISSUE #71&lt;/a&gt; 作业关闭功能（shutdown）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/72&#34;&gt;ISSUE #72&lt;/a&gt; 关闭的作业可删除&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/81&#34;&gt;ISSUE #81&lt;/a&gt; 使用集中清理作业上次结束状态代替各自清理，各自清理可能导致作业机下线而产生未清理的结束状态&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;缺陷修正-8:0e7a0379e76a8b6dfd2072d5a9672bab&#34;&gt;缺陷修正&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/74&#34;&gt;ISSUE #74&lt;/a&gt; 流式处理且失效转移时，失效转移的分片项不能执行一次即停止&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/77&#34;&gt;ISSUE #77&lt;/a&gt; dataflow类型作业，fetchData如果有数据，则应与processData成对执行&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/78&#34;&gt;ISSUE #78&lt;/a&gt; Spring方式配置作业监听启用AOP导致不能正常使用问题&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;1-0-5:0e7a0379e76a8b6dfd2072d5a9672bab&#34;&gt;1.0.5&lt;/h2&gt;

&lt;h3 id=&#34;功能提升-6:0e7a0379e76a8b6dfd2072d5a9672bab&#34;&gt;功能提升&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/2&#34;&gt;ISSUE #2&lt;/a&gt; 增加前置和后置任务&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/60&#34;&gt;ISSUE #60&lt;/a&gt; 可于Dataflow类型作业定制化线程池配置&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/61&#34;&gt;ISSUE #62&lt;/a&gt; 作业状态清理提速&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/65&#34;&gt;ISSUE #65&lt;/a&gt; 增加前置和后置任务Spring命名空间支持&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;缺陷修正-9:0e7a0379e76a8b6dfd2072d5a9672bab&#34;&gt;缺陷修正&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/61&#34;&gt;ISSUE #61&lt;/a&gt; 分片和主节点选举同时发生时，死锁问题解决&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/63&#34;&gt;ISSUE #63&lt;/a&gt; 获取作业TreeCache时可能会获取到前缀相同的其他作业的TreeCache&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/69&#34;&gt;ISSUE #69&lt;/a&gt; 分片时如在Zk中有的作业服务器sharding节点不存在将导致无法重新分片&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;结构调整-5:0e7a0379e76a8b6dfd2072d5a9672bab&#34;&gt;结构调整&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/59&#34;&gt;ISSUE #59&lt;/a&gt; 将elastic-job依赖的curator从&lt;code&gt;2.8.0&lt;/code&gt;升级至&lt;code&gt;2.10.0&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;1-0-4:0e7a0379e76a8b6dfd2072d5a9672bab&#34;&gt;1.0.4&lt;/h2&gt;

&lt;h3 id=&#34;功能提升-7:0e7a0379e76a8b6dfd2072d5a9672bab&#34;&gt;功能提升&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/16&#34;&gt;ISSUE #16&lt;/a&gt; 提供内嵌zookeeper，简化开发环境&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/28&#34;&gt;ISSUE #28&lt;/a&gt; Dataflow类型作业增加&lt;code&gt;processData&lt;/code&gt;批量处理数据的方法&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/56&#34;&gt;ISSUE #56&lt;/a&gt; 作业自定义参数设置&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;结构调整-6:0e7a0379e76a8b6dfd2072d5a9672bab&#34;&gt;结构调整&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/57&#34;&gt;ISSUE #57&lt;/a&gt; 精简模块，移除&lt;code&gt;elastic-job-test&lt;/code&gt;模块&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/58&#34;&gt;ISSUE #58&lt;/a&gt; 增加批量处理功能导致的作业类型接口变更&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;1-0-3:0e7a0379e76a8b6dfd2072d5a9672bab&#34;&gt;1.0.3&lt;/h2&gt;

&lt;h3 id=&#34;功能提升-8:0e7a0379e76a8b6dfd2072d5a9672bab&#34;&gt;功能提升&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/39&#34;&gt;ISSUE #39&lt;/a&gt; 增加作业辅助监听功能，通过dump命令抓取作业运行时信息&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/43&#34;&gt;ISSUE #43&lt;/a&gt; 增加作业异常处理回调接口&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;缺陷修正-10:0e7a0379e76a8b6dfd2072d5a9672bab&#34;&gt;缺陷修正&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/30&#34;&gt;ISSUE #30&lt;/a&gt; 注册中心宕机较长时间后重新恢复，作业无法继续执行&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/36&#34;&gt;ISSUE #36&lt;/a&gt; 任务在控制台暂停之后，无法恢复运行&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/40&#34;&gt;ISSUE #40&lt;/a&gt; TreeCache使用粒度过粗导致内存溢出&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;1-0-2:0e7a0379e76a8b6dfd2072d5a9672bab&#34;&gt;1.0.2&lt;/h2&gt;

&lt;h3 id=&#34;功能提升-9:0e7a0379e76a8b6dfd2072d5a9672bab&#34;&gt;功能提升&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/6&#34;&gt;ISSUE #6&lt;/a&gt; 校对作业服务器与注册中心时间误差&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/8&#34;&gt;ISSUE #8&lt;/a&gt; 增加misfire开关，默认开启错过任务重新执行&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/9&#34;&gt;ISSUE #9&lt;/a&gt; 分片策略可配置化&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/10&#34;&gt;ISSUE #10&lt;/a&gt; 提供根据作业名称hash值取奇偶数分片排序策略&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/14&#34;&gt;ISSUE #14&lt;/a&gt; 控制台修改cron表达式后，任务将实时更新cron&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/20&#34;&gt;ISSUE #20&lt;/a&gt; 运维界面任务列表显示增加cron表达式&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/54&#34;&gt;ISSUE #54&lt;/a&gt; SequencePerpetual类型作业性能提升，将抓取数据改为多线程，之前仅处理数据为多线程&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/55&#34;&gt;ISSUE #55&lt;/a&gt; offset存储功能&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;缺陷修正-11:0e7a0379e76a8b6dfd2072d5a9672bab&#34;&gt;缺陷修正&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/1&#34;&gt;ISSUE #1&lt;/a&gt; 复杂网络环境下IP地址获取不准确的问题&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/13&#34;&gt;ISSUE #13&lt;/a&gt; 作业抛出运行时异常后，后续不会继续触发&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/53&#34;&gt;ISSUE #53&lt;/a&gt; Dataflow的Sequence类型作业采用多线程抓取数据&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;结构调整-7:0e7a0379e76a8b6dfd2072d5a9672bab&#34;&gt;结构调整&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/17&#34;&gt;ISSUE #17&lt;/a&gt; 作业类型接口变更&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;1-0-1:0e7a0379e76a8b6dfd2072d5a9672bab&#34;&gt;1.0.1&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;初始版本&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Elastic-Job-Lite使用指南</title>
      <link>http://dangdangdotcom.github.io/elastic-job/post/user_guide/lite/lite_index/</link>
      <pubDate>Sat, 27 Aug 2016 16:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/post/user_guide/lite/lite_index/</guid>
      <description>

&lt;h1 id=&#34;elastic-job-lite使用指南:a7868a07e449e89f9c7027c7fe3676ea&#34;&gt;Elastic-Job-Lite使用指南&lt;/h1&gt;

&lt;h2 id=&#34;环境需求-env-required:a7868a07e449e89f9c7027c7fe3676ea&#34;&gt;&lt;a href=&#34;../env_required/&#34;&gt;环境需求&lt;/a&gt;&lt;/h2&gt;

&lt;h2 id=&#34;开发指南-dev-guide:a7868a07e449e89f9c7027c7fe3676ea&#34;&gt;&lt;a href=&#34;../dev_guide/&#34;&gt;开发指南&lt;/a&gt;&lt;/h2&gt;

&lt;h2 id=&#34;作业部署-deploy-guide:a7868a07e449e89f9c7027c7fe3676ea&#34;&gt;&lt;a href=&#34;../deploy_guide/&#34;&gt;作业部署&lt;/a&gt;&lt;/h2&gt;

&lt;h2 id=&#34;其他功能-other-features:a7868a07e449e89f9c7027c7fe3676ea&#34;&gt;&lt;a href=&#34;../other_features/&#34;&gt;其他功能&lt;/a&gt;&lt;/h2&gt;
</description>
    </item>
    
    <item>
      <title>Elastic-Job-Lite环境需求</title>
      <link>http://dangdangdotcom.github.io/elastic-job/post/user_guide/lite/env_required/</link>
      <pubDate>Wed, 27 Jan 2016 16:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/post/user_guide/lite/env_required/</guid>
      <description>

&lt;h1 id=&#34;elastic-job-lite环境需求:5fc72554ce10b593ad2e772b637ec905&#34;&gt;Elastic-Job-Lite环境需求&lt;/h1&gt;

&lt;h2 id=&#34;java:5fc72554ce10b593ad2e772b637ec905&#34;&gt;Java&lt;/h2&gt;

&lt;p&gt;请使用&lt;code&gt;JDK1.7&lt;/code&gt;及其以上版本。&lt;a href=&#34;http://www.oracle.com/technetwork/java/javase/downloads/index.html&#34;&gt;详情参见&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;zookeeper:5fc72554ce10b593ad2e772b637ec905&#34;&gt;Zookeeper&lt;/h2&gt;

&lt;p&gt;请使用&lt;code&gt;Zookeeper 3.4.6&lt;/code&gt;及其以上版本。&lt;a href=&#34;https://zookeeper.apache.org/doc/trunk/zookeeperStarted.html&#34;&gt;详情参见&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;maven:5fc72554ce10b593ad2e772b637ec905&#34;&gt;Maven&lt;/h2&gt;

&lt;p&gt;请使用&lt;code&gt;Maven 3.0.4&lt;/code&gt;及其以上版本。&lt;a href=&#34;http://maven.apache.org/install.html&#34;&gt;详情参见&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Elastic-Job-Lite开发指南</title>
      <link>http://dangdangdotcom.github.io/elastic-job/post/user_guide/lite/dev_guide/</link>
      <pubDate>Wed, 27 Jan 2016 16:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/post/user_guide/lite/dev_guide/</guid>
      <description>

&lt;h1 id=&#34;elastic-job-lite开发指南:6fde5c464b5cd157fa8c5a0e82fa63a0&#34;&gt;Elastic-Job-Lite开发指南&lt;/h1&gt;

&lt;h2 id=&#34;作业开发:6fde5c464b5cd157fa8c5a0e82fa63a0&#34;&gt;作业开发&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Elastic-Job-Lite&lt;/code&gt;和&lt;code&gt;Elastic-Job-Cloud&lt;/code&gt;提供统一作业接口，开发者仅需对业务作业进行一次开发，之后可根据不同的配置以及部署至不同的&lt;code&gt;Lite&lt;/code&gt;或&lt;code&gt;Cloud&lt;/code&gt;环境。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Elastic-Job&lt;/code&gt;提供&lt;code&gt;Simple&lt;/code&gt;、&lt;code&gt;Dataflow&lt;/code&gt;和&lt;code&gt;Script&lt;/code&gt; &lt;code&gt;3&lt;/code&gt;种作业类型。
方法参数&lt;code&gt;shardingContext&lt;/code&gt;包含作业配置、片和运行时信息。可通过&lt;code&gt;getShardingTotalCount()&lt;/code&gt;, &lt;code&gt;getShardingItem()&lt;/code&gt;等方法分别获取分片总数，运行在本作业服务器的分片序列号等。&lt;/p&gt;

&lt;h3 id=&#34;1-simple类型作业:6fde5c464b5cd157fa8c5a0e82fa63a0&#34;&gt;1. Simple类型作业&lt;/h3&gt;

&lt;p&gt;意为简单实现，未经任何封装的类型。需实现&lt;code&gt;SimpleJob&lt;/code&gt;接口。该接口仅提供单一方法用于覆盖，此方法将定时执行。与&lt;code&gt;Quartz&lt;/code&gt;原生接口相似，但提供了弹性扩缩容和分片等功能。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class MyElasticJob implements SimpleJob {
    
    @Override
    public void execute(ShardingContext context) {
        switch (context.getShardingItem()) {
            case 0: 
                // do something by sharding item 0
                break;
            case 1: 
                // do something by sharding item 1
                break;
            case 2: 
                // do something by sharding item 2
                break;
            // case n: ...
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-dataflow类型作业:6fde5c464b5cd157fa8c5a0e82fa63a0&#34;&gt;2. Dataflow类型作业&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Dataflow&lt;/code&gt;类型用于处理数据流，需实现&lt;code&gt;DataflowJob&lt;/code&gt;接口。该接口提供&lt;code&gt;2&lt;/code&gt;个方法可供覆盖，分别用于抓取(&lt;code&gt;fetchData&lt;/code&gt;)和处理(&lt;code&gt;processData&lt;/code&gt;)数据。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class MyElasticJob implements DataflowJob&amp;lt;Foo&amp;gt; {
    
    @Override
    public List&amp;lt;Foo&amp;gt; fetchData(ShardingContext context) {
        switch (context.getShardingItem()) {
            case 0: 
                List&amp;lt;Foo&amp;gt; data = // get data from database by sharding item 0
                return data;
            case 1: 
                List&amp;lt;Foo&amp;gt; data = // get data from database by sharding item 1
                return data;
            case 2: 
                List&amp;lt;Foo&amp;gt; data = // get data from database by sharding item 2
                return data;
            // case n: ...
        }
    }
    
    @Override
    public void processData(ShardingContext shardingContext, List&amp;lt;Foo&amp;gt; data) {
        // process data
        // ...
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;流式处理&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;可通过&lt;code&gt;DataflowJobConfiguration&lt;/code&gt;配置是否流式处理。&lt;/p&gt;

&lt;p&gt;流式处理数据只有&lt;code&gt;fetchData&lt;/code&gt;方法的返回值为&lt;code&gt;null&lt;/code&gt;或集合长度为空时，作业才停止抓取，否则作业将一直运行下去；
非流式处理数据则只会在每次作业执行过程中执行一次&lt;code&gt;fetchData&lt;/code&gt;方法和&lt;code&gt;processData&lt;/code&gt;方法，随即完成本次作业。&lt;/p&gt;

&lt;p&gt;如果采用流式作业处理方式，建议&lt;code&gt;processData&lt;/code&gt;处理数据后更新其状态，避免&lt;code&gt;fetchData&lt;/code&gt;再次抓取到，从而使得作业永不停止。
流式数据处理参照&lt;code&gt;TbSchedule&lt;/code&gt;设计，适用于不间歇的数据处理。&lt;/p&gt;

&lt;h3 id=&#34;3-script类型作业:6fde5c464b5cd157fa8c5a0e82fa63a0&#34;&gt;3. Script类型作业&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Script&lt;/code&gt;类型作业意为脚本类型作业，支持&lt;code&gt;shell&lt;/code&gt;，&lt;code&gt;python&lt;/code&gt;，&lt;code&gt;perl&lt;/code&gt;等所有类型脚本。只需通过控制台或代码配置&lt;code&gt;scriptCommandLine&lt;/code&gt;即可，无需编码。执行脚本路径可包含参数，参数传递完毕后，作业框架会自动追加最后一个参数为作业运行时信息。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/bash
echo sharding execution context is $*
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;作业运行时输出&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sharding execution context is {&amp;quot;jobName&amp;quot;:&amp;quot;scriptElasticDemoJob&amp;quot;,&amp;quot;shardingTotalCount&amp;quot;:10,&amp;quot;jobParameter&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;shardingItem&amp;quot;:0,&amp;quot;shardingParameter&amp;quot;:&amp;quot;A&amp;quot;}&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;作业配置:6fde5c464b5cd157fa8c5a0e82fa63a0&#34;&gt;作业配置&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Elastic-Job&lt;/code&gt;配置分为&lt;code&gt;3&lt;/code&gt;个层级，分别是&lt;code&gt;Core&lt;/code&gt;, &lt;code&gt;Type&lt;/code&gt;和&lt;code&gt;Root&lt;/code&gt;。每个层级使用相似于装饰者模式的方式装配。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Core&lt;/code&gt;对应&lt;code&gt;JobCoreConfiguration&lt;/code&gt;，用于提供作业核心配置信息，如：作业名称、分片总数、&lt;code&gt;CRON&lt;/code&gt;表达式等。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Type&lt;/code&gt;对应&lt;code&gt;JobTypeConfiguration&lt;/code&gt;，有&lt;code&gt;3&lt;/code&gt;个子类分别对应&lt;code&gt;SIMPLE&lt;/code&gt;, &lt;code&gt;DATAFLOW&lt;/code&gt;和&lt;code&gt;SCRIPT&lt;/code&gt;类型作业，提供&lt;code&gt;3&lt;/code&gt;种作业需要的不同配置，如：&lt;code&gt;DATAFLOW&lt;/code&gt;类型是否流式处理或&lt;code&gt;SCRIPT&lt;/code&gt;类型的命令行等。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Root&lt;/code&gt;对应&lt;code&gt;JobRootConfiguration&lt;/code&gt;，有&lt;code&gt;2&lt;/code&gt;个子类分别对应&lt;code&gt;Lite&lt;/code&gt;和&lt;code&gt;Cloud&lt;/code&gt;部署类型，提供不同部署类型所需的配置，如：&lt;code&gt;Lite&lt;/code&gt;类型的是否需要覆盖本地配置或&lt;code&gt;Cloud&lt;/code&gt;占用&lt;code&gt;CPU&lt;/code&gt;或&lt;code&gt;Memory&lt;/code&gt;数量等。&lt;/p&gt;

&lt;h3 id=&#34;使用java代码配置:6fde5c464b5cd157fa8c5a0e82fa63a0&#34;&gt;使用Java代码配置&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;通用作业配置&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    // 定义作业核心配置
    JobCoreConfiguration simpleCoreConfig = JobCoreConfiguration.newBuilder(&amp;quot;demoSimpleJob&amp;quot;, &amp;quot;0/15 * * * * ?&amp;quot;, 10).build();
    // 定义SIMPLE类型配置
    SimpleJobConfiguration simpleJobConfig = new SimpleJobConfiguration(simpleCoreConfig, SimpleDemoJob.class.getCanonicalName());
    // 定义Lite作业根配置
    JobRootConfiguration simpleJobRootConfig = LiteJobConfiguration.newBuilder(simpleJobConfig).build();
    
    // 定义作业核心配置
    JobCoreConfiguration dataflowCoreConfig = JobCoreConfiguration.newBuilder(&amp;quot;demoDataflowJob&amp;quot;, &amp;quot;0/30 * * * * ?&amp;quot;, 10).build();
    // 定义DATAFLOW类型配置
    DataflowJobConfiguration dataflowJobConfig = new DataflowJobConfiguration(dataflowCoreConfig, DataflowDemoJob.class.getCanonicalName(), true);
    // 定义Lite作业根配置
    JobRootConfiguration dataflowJobRootConfig = LiteJobConfiguration.newBuilder(dataflowJobConfig).build();
    
    // 定义作业核心配置配置
    JobCoreConfiguration scriptCoreConfig = JobCoreConfiguration.newBuilder(&amp;quot;demoScriptJob&amp;quot;, &amp;quot;0/45 * * * * ?&amp;quot;, 10).build();
    // 定义SCRIPT类型配置
    ScriptJobConfiguration scriptJobConfig = new ScriptJobConfiguration(scriptCoreConfig, &amp;quot;test.sh&amp;quot;);
    // 定义Lite作业根配置
    JobRootConfiguration scriptJobRootConfig = LiteJobConfiguration.newBuilder(scriptCoreConfig).build();
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;spring命名空间配置:6fde5c464b5cd157fa8c5a0e82fa63a0&#34;&gt;Spring命名空间配置&lt;/h3&gt;

&lt;p&gt;与&lt;code&gt;Spring&lt;/code&gt;容器配合使用作业，可将作业&lt;code&gt;Bean&lt;/code&gt;配置为&lt;code&gt;Spring Bean&lt;/code&gt;，并在作业中通过依赖注入使用&lt;code&gt;Spring&lt;/code&gt;容器管理的数据源等对象。可用&lt;code&gt;placeholder&lt;/code&gt;占位符从属性文件中取值。&lt;code&gt;Lite&lt;/code&gt;可考虑使用&lt;code&gt;Spring&lt;/code&gt;命名空间方式简化配置。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;beans xmlns=&amp;quot;http://www.springframework.org/schema/beans&amp;quot;
    xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;
    xmlns:reg=&amp;quot;http://www.dangdang.com/schema/ddframe/reg&amp;quot;
    xmlns:job=&amp;quot;http://www.dangdang.com/schema/ddframe/job&amp;quot;
    xsi:schemaLocation=&amp;quot;http://www.springframework.org/schema/beans 
                        http://www.springframework.org/schema/beans/spring-beans.xsd 
                        http://www.dangdang.com/schema/ddframe/reg 
                        http://www.dangdang.com/schema/ddframe/reg/reg.xsd 
                        http://www.dangdang.com/schema/ddframe/job 
                        http://www.dangdang.com/schema/ddframe/job/job.xsd 
                        &amp;quot;&amp;gt;
    &amp;lt;!--配置作业注册中心 --&amp;gt;
    &amp;lt;reg:zookeeper id=&amp;quot;regCenter&amp;quot; server-lists=&amp;quot; yourhost:2181&amp;quot; namespace=&amp;quot;dd-job&amp;quot; base-sleep-time-milliseconds=&amp;quot;1000&amp;quot; max-sleep-time-milliseconds=&amp;quot;3000&amp;quot; max-retries=&amp;quot;3&amp;quot; /&amp;gt;
    
    &amp;lt;!-- 配置简单作业--&amp;gt;
    &amp;lt;job:simple id=&amp;quot;simpleElasticJob&amp;quot; class=&amp;quot;xxx.MySimpleElasticJob&amp;quot; registry-center-ref=&amp;quot;regCenter&amp;quot; cron=&amp;quot;0/10 * * * * ?&amp;quot; sharding-total-count=&amp;quot;3&amp;quot; sharding-item-parameters=&amp;quot;0=A,1=B,2=C&amp;quot; /&amp;gt;
    
    &amp;lt;!-- 配置数据流作业--&amp;gt;
    &amp;lt;job:dataflow id=&amp;quot;throughputDataflow&amp;quot; class=&amp;quot;xxx.MyThroughputDataflowElasticJob&amp;quot; registry-center-ref=&amp;quot;regCenter&amp;quot; cron=&amp;quot;0/10 * * * * ?&amp;quot; sharding-total-count=&amp;quot;3&amp;quot; sharding-item-parameters=&amp;quot;0=A,1=B,2=C&amp;quot; /&amp;gt;
    
    &amp;lt;!-- 配置脚本作业--&amp;gt;
    &amp;lt;job:script id=&amp;quot;scriptElasticJob&amp;quot; registry-center-ref=&amp;quot;regCenter&amp;quot; cron=&amp;quot;0/10 * * * * ?&amp;quot; sharding-total-count=&amp;quot;3&amp;quot; sharding-item-parameters=&amp;quot;0=A,1=B,2=C&amp;quot; script-command-line=&amp;quot;/your/file/path/demo.sh&amp;quot; /&amp;gt;
    
    &amp;lt;!-- 配置带监听的简单作业--&amp;gt;
    &amp;lt;job:simple id=&amp;quot;listenerElasticJob&amp;quot; class=&amp;quot;xxx.MySimpleListenerElasticJob&amp;quot; registry-center-ref=&amp;quot;regCenter&amp;quot; cron=&amp;quot;0/10 * * * * ?&amp;quot; sharding-total-count=&amp;quot;3&amp;quot; sharding-item-parameters=&amp;quot;0=A,1=B,2=C&amp;quot;&amp;gt;
        &amp;lt;job:listener class=&amp;quot;xx.MySimpleJobListener&amp;quot;/&amp;gt;
        &amp;lt;job:distributed-listener class=&amp;quot;xx.MyOnceSimpleJobListener&amp;quot; started-timeout-milliseconds=&amp;quot;1000&amp;quot; completed-timeout-milliseconds=&amp;quot;2000&amp;quot; /&amp;gt;
    &amp;lt;/job:simple&amp;gt;
    
    &amp;lt;!-- 配置带作业数据库事件追踪的简单作业--&amp;gt;
    &amp;lt;job:simple id=&amp;quot;listenerElasticJob&amp;quot; class=&amp;quot;xxx.MySimpleListenerElasticJob&amp;quot; registry-center-ref=&amp;quot;regCenter&amp;quot; cron=&amp;quot;0/10 * * * * ?&amp;quot; sharding-total-count=&amp;quot;3&amp;quot; sharding-item-parameters=&amp;quot;0=A,1=B,2=C&amp;quot; event-trace-rdb-data-source=&amp;quot;yourDataSource&amp;quot;&amp;gt;
    &amp;lt;/job:simple&amp;gt;
&amp;lt;/beans&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;job-simple命名空间属性详细说明:6fde5c464b5cd157fa8c5a0e82fa63a0&#34;&gt;job:simple命名空间属性详细说明&lt;/h4&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性名&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;类型&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;是否必填&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;缺省值&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;id&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;String&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;是&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;作业名称&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;class&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;String&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;否&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;作业实现类，需实现&lt;code&gt;ElasticJob&lt;/code&gt;接口，脚本型作业不需要配置&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;registry-center-ref&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;String&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;是&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;注册中心&lt;code&gt;Bean&lt;/code&gt;的引用，需引用&lt;code&gt;reg:zookeeper&lt;/code&gt;的声明&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;cron&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;String&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;是&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;cron&lt;/code&gt;表达式，用于配置作业触发时间&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;sharding-total-count&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;int&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;是&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;作业分片总数&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;sharding-item-parameters&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;String&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;否&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;分片序列号和参数用等号分隔，多个键值对用逗号分隔&lt;br /&gt;分片序列号从&lt;code&gt;0&lt;/code&gt;开始，不可大于或等于作业分片总数&lt;br /&gt;如：&lt;br/&gt;&lt;code&gt;0=a,1=b,2=c&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;job-parameter&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;String&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;否&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;作业自定义参数&lt;br /&gt;作业自定义参数，可通过传递该参数为作业调度的业务方法传参，用于实现带参数的作业&lt;br /&gt;例：每次获取的数据量、作业实例从数据库读取的主键等&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;monitor-execution&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;boolean&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;否&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;true&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;监控作业运行时状态&lt;br /&gt;每次作业执行时间和间隔时间均非常短的情况，建议不监控作业运行时状态以提升效率。因为是瞬时状态，所以无必要监控。请用户自行增加数据堆积监控。并且不能保证数据重复选取，应在作业中实现幂等性。&lt;br /&gt;每次作业执行时间和间隔时间均较长的情况，建议监控作业运行时状态，可保证数据不会重复选取。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;monitor-port&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;int&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;否&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;作业监控端口&lt;br /&gt;建议配置作业监控端口, 方便开发者dump作业信息。&lt;br /&gt;使用方法: echo &amp;ldquo;dump&amp;rdquo; | nc 127.0.0.1 9888&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;max-time-diff-seconds&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;int&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;否&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;最大允许的本机与注册中心的时间误差秒数&lt;br /&gt;如果时间误差超过配置秒数则作业启动时将抛异常&lt;br /&gt;配置为&lt;code&gt;-1&lt;/code&gt;表示不校验时间误差&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;failover&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;boolean&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;否&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;false&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;是否开启失效转移&lt;br /&gt;仅&lt;code&gt;monitorExecution&lt;/code&gt;开启，失效转移才有效&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;misfire&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;boolean&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;否&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;true&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;是否开启错过任务重新执行&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;job-sharding-strategy-class&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;String&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;否&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;true&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;作业分片策略实现类全路径&lt;br /&gt;默认使用平均分配策略&lt;br /&gt;详情参见：&lt;a href=&#34;http://dangdangdotcom.github.io/elastic-job/post/job_strategy&#34;&gt;作业分片策略&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;description&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;String&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;否&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;作业描述信息&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;disabled&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;boolean&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;否&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;false&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;作业是否禁止启动&lt;br /&gt;可用于部署作业时，先禁止启动，部署结束后统一启动&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;overwrite&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;boolean&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;否&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;false&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;本地配置是否可覆盖注册中心配置&lt;br /&gt;如果可覆盖，每次启动作业都以本地配置为准&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;jobProperties&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;String&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;否&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;作业定制化属性，目前支持&lt;code&gt;job_exception_handler&lt;/code&gt;和&lt;code&gt;executor_service_handler&lt;/code&gt;，用于扩展异常处理和自定义作业处理线程池&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;event-trace-rdb-data-source&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;String&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;否&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;作业事件追踪的数据源&lt;code&gt;Bean&lt;/code&gt;引用&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&#34;job-dataflow命名空间属性详细说明:6fde5c464b5cd157fa8c5a0e82fa63a0&#34;&gt;job:dataflow命名空间属性详细说明&lt;/h4&gt;

&lt;p&gt;job:dataflow命名空间拥有job:simple命名空间的全部属性，以下仅列出特有属性&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性名&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;类型&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;是否必填&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;缺省值&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;streaming-process&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;boolean&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;否&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;false&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;是否流式处理数据&lt;br /&gt;如果流式处理数据, 则&lt;code&gt;fetchData&lt;/code&gt;不返回空结果将持续执行作业&lt;br /&gt;如果非流式处理数据, 则处理数据完成后作业结束&lt;br /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&#34;job-script命名空间属性详细说明-基本属性参照job-simple命名空间属性详细说明:6fde5c464b5cd157fa8c5a0e82fa63a0&#34;&gt;job:script命名空间属性详细说明，基本属性参照job:simple命名空间属性详细说明&lt;/h4&gt;

&lt;p&gt;job:script命名空间拥有job:simple命名空间的全部属性，以下仅列出特有属性&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性名&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;类型&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;是否必填&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;缺省值&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;script-command-line&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;String&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;否&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;脚本型作业执行命令行&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&#34;job-listener命名空间属性详细说明:6fde5c464b5cd157fa8c5a0e82fa63a0&#34;&gt;job:listener命名空间属性详细说明&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;job:listener&lt;/code&gt;必须配置为&lt;code&gt;job:bean&lt;/code&gt;的子元素，并且在子元素中只允许出现一次&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性名&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;类型&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;是否必填&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;缺省值&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;class&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;String&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;是&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;前置后置任务监听实现类，需实现&lt;code&gt;ElasticJobListener&lt;/code&gt;接口&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&#34;job-distributed-listener命名空间属性详细说明:6fde5c464b5cd157fa8c5a0e82fa63a0&#34;&gt;job:distributed-listener命名空间属性详细说明&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;job:distributed-listener&lt;/code&gt;必须配置为&lt;code&gt;job:bean&lt;/code&gt;的子元素，并且在子元素中只允许出现一次&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性名&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;类型&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;是否必填&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;缺省值&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;class&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;String&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;是&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;前置后置任务分布式监听实现类，需继承&lt;code&gt;AbstractDistributeOnceElasticJobListener&lt;/code&gt;类&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;started-timeout-milliseconds&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;long&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;否&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Long.MAX_VALUE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;最后一个作业执行前的执行方法的超时时间&lt;br /&gt;单位：毫秒&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;completed-timeout-milliseconds&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;long&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;否&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Long.MAX_VALUE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;最后一个作业执行后的执行方法的超时时间&lt;br /&gt;单位：毫秒&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&#34;reg-zookeeper命名空间属性详细说明:6fde5c464b5cd157fa8c5a0e82fa63a0&#34;&gt;reg:zookeeper命名空间属性详细说明&lt;/h4&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性名&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;类型&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;是否必填&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;缺省值&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;id&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;String&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;是&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;注册中心在&lt;code&gt;Spring&lt;/code&gt;容器中的主键&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;server-lists&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;String&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;是&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;连接&lt;code&gt;Zookeeper&lt;/code&gt;服务器的列表&lt;br /&gt;包括IP地址和端口号&lt;br /&gt;多个地址用逗号分隔&lt;br /&gt;如: host1:2181,host2:2181&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;namespace&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;String&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;是&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;Zookeeper&lt;/code&gt;的命名空间&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;base-sleep-time-milliseconds&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;int&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;否&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1000&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;等待重试的间隔时间的初始值&lt;br /&gt;单位：毫秒&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;max-sleep-time-milliseconds&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;int&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;否&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;3000&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;等待重试的间隔时间的最大值&lt;br /&gt;单位：毫秒&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;max-retries&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;int&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;否&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;最大重试次数&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;session-timeout-milliseconds&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;int&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;否&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;60000&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;会话超时时间&lt;br /&gt;单位：毫秒&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;connection-timeout-milliseconds&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;int&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;否&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;15000&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;连接超时时间&lt;br /&gt;单位：毫秒&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;digest&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;String&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;否&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;无验证&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;连接&lt;code&gt;Zookeeper&lt;/code&gt;的权限令牌&lt;br /&gt;缺省为不需要权限验证&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;作业启动:6fde5c464b5cd157fa8c5a0e82fa63a0&#34;&gt;作业启动&lt;/h2&gt;

&lt;h3 id=&#34;1-java启动方式:6fde5c464b5cd157fa8c5a0e82fa63a0&#34;&gt;1. Java启动方式&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class JobDemo {
    
    public static void main(String[] args) {
        new JobScheduler(createRegistryCenter(), createJobConfiguration()).init();
    }
    
    private static CoordinatorRegistryCenter createRegistryCenter() {
        CoordinatorRegistryCenter regCenter = new ZookeeperRegistryCenter(new ZookeeperConfiguration(&amp;quot;zk_host:2181&amp;quot;, &amp;quot;elastic-job-demo&amp;quot;));
        regCenter.init();
        return regCenter;
    }
    
    private static LiteJobConfiguration createJobConfiguration() {
        // 创建作业配置
        ...
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-spring启动方式:6fde5c464b5cd157fa8c5a0e82fa63a0&#34;&gt;2. Spring启动方式&lt;/h3&gt;

&lt;p&gt;参见&lt;code&gt;Spring&lt;/code&gt;命名空间&lt;/p&gt;

&lt;h2 id=&#34;其他功能:6fde5c464b5cd157fa8c5a0e82fa63a0&#34;&gt;其他功能&lt;/h2&gt;

&lt;h3 id=&#34;1-作业事件追踪:6fde5c464b5cd157fa8c5a0e82fa63a0&#34;&gt;1. 作业事件追踪&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;elastic-job&lt;/code&gt;在配置中提供了&lt;code&gt;JobEventConfiguration&lt;/code&gt;，目前支持数据库方式配置。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    // 初始化数据源
    DataSource dataSource = ...;
    // 定义日志数据库事件溯源配置
    JobEventConfiguration jobEventRdbConfig = new JobEventRdbConfiguration(dataSource);
    // 初始化注册中心
    CoordinatorRegistryCenter regCenter = ...;
    // 初始化作业配置
    LiteJobConfiguration liteJobConfig = ...;
    new JobScheduler(regCenter, liteJobConfig, jobEventRdbConfig).init(); 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;更多信息请参见&lt;a href=&#34;../../common/event_trace/&#34;&gt;Elastic-Job事件追踪&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&#34;2-异常处理:6fde5c464b5cd157fa8c5a0e82fa63a0&#34;&gt;2. 异常处理&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;elastic-job&lt;/code&gt;在配置中提供了&lt;code&gt;JobProperties&lt;/code&gt;，可扩展&lt;code&gt;JobExceptionHandler&lt;/code&gt;接口，并设置&lt;code&gt;job_exception_handler&lt;/code&gt;定制异常处理流程，默认实现是记录日志但不抛出异常。&lt;/p&gt;

&lt;h3 id=&#34;定制化作业处理线程池:6fde5c464b5cd157fa8c5a0e82fa63a0&#34;&gt;定制化作业处理线程池&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;elastic-job&lt;/code&gt;在配置中提供了&lt;code&gt;JobProperties&lt;/code&gt;，可扩展&lt;code&gt;ExecutorServiceHandler&lt;/code&gt;接口，并设置&lt;code&gt;executor_service_handler&lt;/code&gt;定制线程池。&lt;/p&gt;

&lt;h3 id=&#34;3-任务监听:6fde5c464b5cd157fa8c5a0e82fa63a0&#34;&gt;3. 任务监听&lt;/h3&gt;

&lt;p&gt;可通过配置多个任务监听器，在任务执行前和执行后执行监听的方法。监听器分为每台作业节点均执行和分布式场景中仅单一节点执行&lt;code&gt;2&lt;/code&gt;种。&lt;/p&gt;

&lt;h4 id=&#34;1-每台作业节点均执行的监听:6fde5c464b5cd157fa8c5a0e82fa63a0&#34;&gt;1. 每台作业节点均执行的监听&lt;/h4&gt;

&lt;p&gt;若作业处理作业服务器的文件，处理完成后删除文件，可考虑使用每个节点均执行清理任务。此类型任务实现简单，且无需考虑全局分布式任务是否完成，请尽量使用此类型监听器。&lt;/p&gt;

&lt;p&gt;步骤：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;定义监听器&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;
public class MyElasticJobListener implements ElasticJobListener {
    
    @Override
    public void beforeJobExecuted(ShardingContexts shardingContexts) {
        // do something ...
    }
    
    @Override
    public void afterJobExecuted(ShardingContexts shardingContexts) {
        // do something ...
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;将监听器作为参数传入&lt;code&gt;JobScheduler&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class JobMain {
    
    public static void main(String[] args) {
        new JobScheduler(createRegistryCenter(), createJobConfiguration(), new MyElasticJobListener()).init();
    }
    
    private static CoordinatorRegistryCenter createRegistryCenter() {
        CoordinatorRegistryCenter regCenter = new ZookeeperRegistryCenter(new ZookeeperConfiguration(&amp;quot;zk_host:2181&amp;quot;, &amp;quot;elastic-job-demo&amp;quot;));
        regCenter.init();
        return regCenter;
    }
    
    private static LiteJobConfiguration createJobConfiguration() {
        // 创建作业配置
        ...
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;2-分布式场景中仅单一节点执行的监听:6fde5c464b5cd157fa8c5a0e82fa63a0&#34;&gt;2. 分布式场景中仅单一节点执行的监听&lt;/h4&gt;

&lt;p&gt;若作业处理数据库数据，处理完成后只需一个节点完成数据清理任务即可。此类型任务处理复杂，需同步分布式环境下作业的状态同步，提供了超时设置来避免作业不同步导致的死锁，请谨慎使用。&lt;/p&gt;

&lt;p&gt;步骤：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;定义监听器&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;
public class TestDistributeOnceElasticJobListener extends AbstractDistributeOnceElasticJobListener {
    
    public TestDistributeOnceElasticJobListener(long startTimeoutMills, long completeTimeoutMills) {
        super(startTimeoutMills, completeTimeoutMills);
    }
    
    @Override
    public void doBeforeJobExecutedAtLastStarted(ShardingContexts shardingContexts) {
        // do something ...
    }
    
    @Override
    public void doAfterJobExecutedAtLastCompleted(ShardingContexts shardingContexts) {
        // do something ...
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;将监听器作为参数传入&lt;code&gt;JobScheduler&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class JobMain {
    
    public static void main(String[] args) {
        long startTimeoutMills = 5000L;
        long completeTimeoutMills = 10000L;
        new JobScheduler(createRegistryCenter(), createJobConfiguration(), new MyDistributeOnceElasticJobListener(startTimeoutMills, completeTimeoutMills)).init();
    }
    
    private static CoordinatorRegistryCenter createRegistryCenter() {
        CoordinatorRegistryCenter regCenter = new ZookeeperRegistryCenter(new ZookeeperConfiguration(&amp;quot;zk_host:2181&amp;quot;, &amp;quot;elastic-job-demo&amp;quot;));
        regCenter.init();
        return regCenter;
    }
    
    private static LiteJobConfiguration createJobConfiguration() {
        // 创建作业配置
        ...
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Elastic-Job-Lite部署指南</title>
      <link>http://dangdangdotcom.github.io/elastic-job/post/user_guide/lite/deploy_guide/</link>
      <pubDate>Wed, 27 Jan 2016 16:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/post/user_guide/lite/deploy_guide/</guid>
      <description>

&lt;h1 id=&#34;elastic-job-lite部署指南:683f09d60aed8667eba01ae825b6e4c6&#34;&gt;Elastic-Job-Lite部署指南&lt;/h1&gt;

&lt;h2 id=&#34;elastic-job-lite:683f09d60aed8667eba01ae825b6e4c6&#34;&gt;Elastic-Job-Lite&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;启动&lt;code&gt;Elastic-Job-Lite&lt;/code&gt;指定注册中心的&lt;code&gt;Zookeeper&lt;/code&gt;。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;部署运维平台&lt;code&gt;war&lt;/code&gt;文件至任何支持&lt;code&gt;Servlet&lt;/code&gt;的&lt;code&gt;Web&lt;/code&gt;容器(可选)。
运维平台以&lt;code&gt;war&lt;/code&gt;包形式提供，可自行部署至&lt;code&gt;tomcat&lt;/code&gt;或&lt;code&gt;jetty&lt;/code&gt;等支持&lt;code&gt;servlet&lt;/code&gt;的&lt;code&gt;web&lt;/code&gt;容器中。&lt;code&gt;elastic-job-console.war&lt;/code&gt;可通过&lt;code&gt;mvn install&lt;/code&gt;编译或&lt;code&gt;maven&lt;/code&gt;中央仓库获取。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;运行包含&lt;code&gt;Elastic-Job-Lite&lt;/code&gt;和业务代码的&lt;code&gt;jar&lt;/code&gt;文件。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Elastic-Job-Cloud其他功能</title>
      <link>http://dangdangdotcom.github.io/elastic-job/post/user_guide/cloud/other_features/</link>
      <pubDate>Wed, 27 Jan 2016 16:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/post/user_guide/cloud/other_features/</guid>
      <description>

&lt;h1 id=&#34;elastic-job-cloud其他功能:3bff589538149fbb9b4c841bdafd58e5&#34;&gt;Elastic-Job-Cloud其他功能&lt;/h1&gt;

&lt;h2 id=&#34;事件追踪-common-event-trace:3bff589538149fbb9b4c841bdafd58e5&#34;&gt;&lt;a href=&#34;../../common/event_trace/&#34;&gt;事件追踪&lt;/a&gt;&lt;/h2&gt;
</description>
    </item>
    
    <item>
      <title>Elastic-Job-Lite其他功能</title>
      <link>http://dangdangdotcom.github.io/elastic-job/post/user_guide/lite/other_features/</link>
      <pubDate>Wed, 27 Jan 2016 16:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/post/user_guide/lite/other_features/</guid>
      <description>

&lt;h1 id=&#34;elastic-job-lite其他功能:3bff589538149fbb9b4c841bdafd58e5&#34;&gt;Elastic-Job-Lite其他功能&lt;/h1&gt;

&lt;h2 id=&#34;事件追踪-common-event-trace:3bff589538149fbb9b4c841bdafd58e5&#34;&gt;&lt;a href=&#34;../../common/event_trace/&#34;&gt;事件追踪&lt;/a&gt;&lt;/h2&gt;

&lt;h2 id=&#34;作业操作api-other-lite-job-operate-api:3bff589538149fbb9b4c841bdafd58e5&#34;&gt;&lt;a href=&#34;../other/lite_job_operate_api/&#34;&gt;作业操作API&lt;/a&gt;&lt;/h2&gt;

&lt;h2 id=&#34;运维平台-other-lite-web-console:3bff589538149fbb9b4c841bdafd58e5&#34;&gt;&lt;a href=&#34;../other/lite_web_console/&#34;&gt;运维平台&lt;/a&gt;&lt;/h2&gt;

&lt;h2 id=&#34;作业运行状态监控-other-lite-execution-monitor:3bff589538149fbb9b4c841bdafd58e5&#34;&gt;&lt;a href=&#34;../other/lite_execution_monitor/&#34;&gt;作业运行状态监控&lt;/a&gt;&lt;/h2&gt;

&lt;h2 id=&#34;作业分片策略-other-lite-job-strategy:3bff589538149fbb9b4c841bdafd58e5&#34;&gt;&lt;a href=&#34;../other/lite_job_strategy/&#34;&gt;作业分片策略&lt;/a&gt;&lt;/h2&gt;

&lt;h2 id=&#34;dump作业运行信息-other-lite-dump:3bff589538149fbb9b4c841bdafd58e5&#34;&gt;&lt;a href=&#34;../other/lite_dump/&#34;&gt;dump作业运行信息&lt;/a&gt;&lt;/h2&gt;
</description>
    </item>
    
    <item>
      <title>Elastic-Job-Lite作业操作API</title>
      <link>http://dangdangdotcom.github.io/elastic-job/post/user_guide/lite/other/lite_job_operate_api/</link>
      <pubDate>Wed, 27 Jan 2016 16:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/post/user_guide/lite/other/lite_job_operate_api/</guid>
      <description>

&lt;h1 id=&#34;elastic-job-lite作业操作api:bebb6c1b22663318144b5d761ed60253&#34;&gt;Elastic-Job-Lite作业操作API&lt;/h1&gt;

&lt;p&gt;REST API(TBD)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Elastic-Job-Cloud运维平台</title>
      <link>http://dangdangdotcom.github.io/elastic-job/post/user_guide/cloud/cloud_web_console/</link>
      <pubDate>Sat, 07 Jan 2017 16:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/post/user_guide/cloud/cloud_web_console/</guid>
      <description>

&lt;h1 id=&#34;elastic-job-cloud运维平台:0f027333df0efc86ae4e7e2fcd61ab91&#34;&gt;Elastic-Job-Cloud运维平台&lt;/h1&gt;

&lt;p&gt;运维平台内嵌于&lt;code&gt;elastic-job-cloud-scheduler&lt;/code&gt;的jar包中, 无需额外启动WEB付服务器, 可通过修改配置文件中&lt;code&gt;http_port&lt;/code&gt;参数来调整启动端口, 默认端口为8899，访问地址为&lt;code&gt;http://{your_scheduler_ip}:8899&lt;/code&gt;。&lt;/p&gt;

&lt;h2 id=&#34;功能列表:0f027333df0efc86ae4e7e2fcd61ab91&#34;&gt;功能列表&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;作业管理（注册、修改、查看以及删除）&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;作业状态查看（待运行、运行中、待失效转移）&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;作业历史查看（运行轨迹、执行状态、历史dashboard）&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;设计理念:0f027333df0efc86ae4e7e2fcd61ab91&#34;&gt;设计理念&lt;/h2&gt;

&lt;p&gt;运维平台采用纯静态HTML+JS方式与后台的&lt;code&gt;Restful API&lt;/code&gt;交互，通过读取作业注册中心展示作业配置和状态，数据库展现作业运行轨迹及执行状态，或更新作业注册中心数据修改作业配置。&lt;/p&gt;

&lt;h2 id=&#34;主要界面:0f027333df0efc86ae4e7e2fcd61ab91&#34;&gt;主要界面&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;作业定义&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;../../../../img/console/cloud/job/job_def.png&#34; alt=&#34;作业定义&#34; /&gt;
&lt;img src=&#34;../../../../img/console/cloud/job/job_reg.png&#34; alt=&#34;作业注册&#34; /&gt;
&lt;img src=&#34;../../../../img/console/cloud/job/job_detail.png&#34; alt=&#34;作业详情&#34; /&gt;
&lt;img src=&#34;../../../../img/console/cloud/job/job_update.png&#34; alt=&#34;作业修改&#34; /&gt;
&lt;img src=&#34;../../../../img/console/cloud/job/job_remove.png&#34; alt=&#34;作业删除&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;作业状态&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;../../../../img/console/cloud/status/job_ready.png&#34; alt=&#34;待运行作业状态&#34; /&gt;
&lt;img src=&#34;../../../../img/console/cloud/status/job_running.png&#34; alt=&#34;运行中作业状态&#34; /&gt;
&lt;img src=&#34;../../../../img/console/cloud/status/job_failover.png&#34; alt=&#34;待失效转移任务状态&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;作业历史&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;../../../../img/console/cloud/history/job_status_trace.png&#34; alt=&#34;运行轨迹查询&#34; /&gt;
&lt;img src=&#34;../../../../img/console/cloud/history/job_execution.png&#34; alt=&#34;执行状态查询&#34; /&gt;
&lt;img src=&#34;../../../../img/console/cloud/history/dashboard.png&#34; alt=&#34;历史dashboard&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Elastic-Job-Lite运维平台</title>
      <link>http://dangdangdotcom.github.io/elastic-job/post/user_guide/lite/other/lite_web_console/</link>
      <pubDate>Wed, 27 Jan 2016 16:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/post/user_guide/lite/other/lite_web_console/</guid>
      <description>

&lt;h1 id=&#34;elastic-job-lite运维平台:439bd6471bc872a959df6d32498bc19c&#34;&gt;Elastic-Job-Lite运维平台&lt;/h1&gt;

&lt;p&gt;以&lt;code&gt;war&lt;/code&gt;包形式提供，可自行部署至&lt;code&gt;tomcat&lt;/code&gt;或&lt;code&gt;jetty&lt;/code&gt;等支持&lt;code&gt;servlet&lt;/code&gt;的&lt;code&gt;web&lt;/code&gt;容器中。可通过&lt;code&gt;mvn install&lt;/code&gt;编译或&lt;code&gt;maven&lt;/code&gt;中央仓库获取。&lt;/p&gt;

&lt;h2 id=&#34;登录:439bd6471bc872a959df6d32498bc19c&#34;&gt;登录&lt;/h2&gt;

&lt;p&gt;默认用户名和密码是&lt;code&gt;root/root&lt;/code&gt;，可通过&lt;code&gt;conf\auth.properties&lt;/code&gt;修改默认登录账户。&lt;/p&gt;

&lt;h2 id=&#34;功能列表:439bd6471bc872a959df6d32498bc19c&#34;&gt;功能列表&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;登录安全控制&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;注册中心管理&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;作业维度状态查看&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;服务器维度状态查看&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;快捷修改作业设置&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;控制作业暂停，恢复运行，停止和删除&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;设计理念:439bd6471bc872a959df6d32498bc19c&#34;&gt;设计理念&lt;/h2&gt;

&lt;p&gt;运维平台和&lt;code&gt;elastic-job-lite&lt;/code&gt;并无直接关系，是通过读取作业注册中心数据展现作业状态，或更新注册中心数据修改全局配置。&lt;/p&gt;

&lt;p&gt;控制台只能控制作业本身是否运行，但不能控制作业进程的启动，因为控制台和作业本身服务器是完全分离的，控制台并不能控制作业服务器。&lt;/p&gt;

&lt;h2 id=&#34;不支持项:439bd6471bc872a959df6d32498bc19c&#34;&gt;不支持项&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;添加作业。
作业在首次运行时将自动添加。&lt;code&gt;Elastic-Job-Lite&lt;/code&gt;以&lt;code&gt;jar&lt;/code&gt;方式启动，并无作业分发功能。如需完全通过运维平台发布作业，请使用&lt;code&gt;Elastic-Job-Cloud&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;主要界面:439bd6471bc872a959df6d32498bc19c&#34;&gt;主要界面&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;总览页&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;../../../../../img/console/lite_index.png&#34; alt=&#34;总览页&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;注册中心管理页&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;../../../../../img/console/lite_reg_center.png&#34; alt=&#34;注册中心管理页&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;作业详细信息页&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;../../../../../img/console/lite_job_details.png&#34; alt=&#34;作业详细信息页&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;服务器详细信息页&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;../../../../../img/console/lite_server_details.png&#34; alt=&#34;服务器详细信息页&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Elastic-Job-Lite作业运行状态监控</title>
      <link>http://dangdangdotcom.github.io/elastic-job/post/user_guide/lite/other/lite_execution_monitor/</link>
      <pubDate>Wed, 27 Jan 2016 16:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/post/user_guide/lite/other/lite_execution_monitor/</guid>
      <description>

&lt;h1 id=&#34;elastic-job-lite作业运行状态监控:1f9cda05dbaefbb38a1893608b3a502c&#34;&gt;Elastic-Job-Lite作业运行状态监控&lt;/h1&gt;

&lt;p&gt;通过监听&lt;code&gt;Elastic-Job-Lite&lt;/code&gt;的&lt;code&gt;zookeeper&lt;/code&gt;注册中心的几个关键节点即可完成作业运行状态监控功能。&lt;/p&gt;

&lt;h2 id=&#34;监听作业服务器存活:1f9cda05dbaefbb38a1893608b3a502c&#34;&gt;监听作业服务器存活&lt;/h2&gt;

&lt;p&gt;监听&lt;code&gt;job_name\servers\ip_address\status&lt;/code&gt;节点是否存在。该节点为临时节点，如果作业服务器下线，该节点将删除。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Elastic-Job-Lite作业分片策略</title>
      <link>http://dangdangdotcom.github.io/elastic-job/post/user_guide/lite/other/lite_job_strategy/</link>
      <pubDate>Wed, 27 Jan 2016 16:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/post/user_guide/lite/other/lite_job_strategy/</guid>
      <description>

&lt;h1 id=&#34;elastic-job-lite作业分片策略:e08f51da0b1c824f68f6b0c4969107bc&#34;&gt;Elastic-Job-Lite作业分片策略&lt;/h1&gt;

&lt;h2 id=&#34;框架提供的分片策略:e08f51da0b1c824f68f6b0c4969107bc&#34;&gt;框架提供的分片策略&lt;/h2&gt;

&lt;h3 id=&#34;averageallocationjobshardingstrategy:e08f51da0b1c824f68f6b0c4969107bc&#34;&gt;AverageAllocationJobShardingStrategy&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;全路径：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;com.dangdang.ddframe.job.lite.api.strategy.impl.AverageAllocationJobShardingStrategy&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;策略说明：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;基于平均分配算法的分片策略，也是默认的分片策略。&lt;/p&gt;

&lt;p&gt;如果分片不能整除，则不能整除的多余分片将依次追加到序号小的服务器。如：&lt;/p&gt;

&lt;p&gt;如果有&lt;code&gt;3&lt;/code&gt;台服务器，分成&lt;code&gt;9&lt;/code&gt;片，则每台服务器分到的分片是：&lt;code&gt;1=[0,1,2], 2=[3,4,5], 3=[6,7,8]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;如果有&lt;code&gt;3&lt;/code&gt;台服务器，分成&lt;code&gt;8&lt;/code&gt;片，则每台服务器分到的分片是：&lt;code&gt;1=[0,1,6], 2=[2,3,7], 3=[4,5]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;如果有&lt;code&gt;3&lt;/code&gt;台服务器，分成&lt;code&gt;10&lt;/code&gt;片，则每台服务器分到的分片是：&lt;code&gt;1=[0,1,2,9], 2=[3,4,5], 3=[6,7,8]&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;odevitysortbynamejobshardingstrategy:e08f51da0b1c824f68f6b0c4969107bc&#34;&gt;OdevitySortByNameJobShardingStrategy&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;全路径：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;com.dangdang.ddframe.job.lite.api.strategy.impl.OdevitySortByNameJobShardingStrategy&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;策略说明：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;根据作业名的哈希值奇偶数决定&lt;code&gt;IP&lt;/code&gt;升降序算法的分片策略。&lt;/p&gt;

&lt;p&gt;作业名的哈希值为奇数则&lt;code&gt;IP&lt;/code&gt;升序。&lt;/p&gt;

&lt;p&gt;作业名的哈希值为偶数则&lt;code&gt;IP&lt;/code&gt;降序。&lt;/p&gt;

&lt;p&gt;用于不同的作业平均分配负载至不同的服务器。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;AverageAllocationJobShardingStrategy&lt;/code&gt;的缺点是，一旦分片数小于作业服务器数，作业将永远分配至&lt;code&gt;IP&lt;/code&gt;地址靠前的服务器，导致&lt;code&gt;IP&lt;/code&gt;地址靠后的服务器空闲。而&lt;code&gt;OdevitySortByNameJobShardingStrategy&lt;/code&gt;则可以根据作业名称重新分配服务器负载。如：&lt;/p&gt;

&lt;p&gt;如果有&lt;code&gt;3&lt;/code&gt;台服务器，分成&lt;code&gt;2&lt;/code&gt;片，作业名称的哈希值为奇数，则每台服务器分到的分片是：&lt;code&gt;1=[0], 2=[1], 3=[]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;如果有&lt;code&gt;3&lt;/code&gt;台服务器，分成&lt;code&gt;2&lt;/code&gt;片，作业名称的哈希值为偶数，则每台服务器分到的分片是：&lt;code&gt;3=[0], 2=[1], 1=[]&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;rotateserverbynamejobshardingstrategy:e08f51da0b1c824f68f6b0c4969107bc&#34;&gt;RotateServerByNameJobShardingStrategy&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;全路径：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;com.dangdang.ddframe.job.lite.api.strategy.impl.RotateServerByNameJobShardingStrategy&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;策略说明：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;根据作业名的哈希值对服务器列表进行轮转的分片策略。&lt;/p&gt;

&lt;h2 id=&#34;自定义分片策略:e08f51da0b1c824f68f6b0c4969107bc&#34;&gt;自定义分片策略&lt;/h2&gt;

&lt;p&gt;实现&lt;code&gt;JobShardingStrategy&lt;/code&gt;接口并实现&lt;code&gt;sharding&lt;/code&gt;方法，接口方法参数为作业服务器&lt;code&gt;IP&lt;/code&gt;列表和分片策略选项，分片策略选项包括作业名称，分片总数以及分片序列号和个性化参数对照表，可以根据需求定制化自己的分片策略。&lt;/p&gt;

&lt;p&gt;欢迎将分片策略以插件的形式贡献至&lt;code&gt;com.dangdang.ddframe.job.lite.api.strategy&lt;/code&gt;包。&lt;/p&gt;

&lt;h2 id=&#34;配置分片策略:e08f51da0b1c824f68f6b0c4969107bc&#34;&gt;配置分片策略&lt;/h2&gt;

&lt;p&gt;与配置通常的作业属性相同，在&lt;code&gt;spring&lt;/code&gt;命名空间或者&lt;code&gt;JobConfiguration&lt;/code&gt;中配置&lt;code&gt;jobShardingStrategyClass&lt;/code&gt;属性，属性值是作业分片策略类的全路径。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Elastic-Job-Lite dump作业运行信息</title>
      <link>http://dangdangdotcom.github.io/elastic-job/post/user_guide/lite/other/lite_dump/</link>
      <pubDate>Wed, 27 Jan 2016 16:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/post/user_guide/lite/other/lite_dump/</guid>
      <description>

&lt;h1 id=&#34;elastic-job-lite-dump作业运行信息:e2cd0391e6bf7f5cd1492cee43ec01af&#34;&gt;Elastic-Job-Lite dump作业运行信息&lt;/h1&gt;

&lt;p&gt;使用&lt;code&gt;Elastic-Job-Lite&lt;/code&gt;过程中可能会碰到一些分布式问题，导致作业运行不稳定。&lt;/p&gt;

&lt;p&gt;由于无法在生产环境调试，通过&lt;code&gt;dump&lt;/code&gt;命令可以把作业内部相关信息&lt;code&gt;dump&lt;/code&gt;出来，方便开发者&lt;code&gt;debug&lt;/code&gt;分析；
另外为了不泄露隐私，已将相关信息中的&lt;code&gt;ip&lt;/code&gt;地址以&lt;code&gt;ip1, ip2...&lt;/code&gt;的形式过滤，可以在互联网上公开传输环境信息，便于进一步完善&lt;code&gt;Elastic-Job&lt;/code&gt;。&lt;/p&gt;

&lt;h2 id=&#34;如何使用:e2cd0391e6bf7f5cd1492cee43ec01af&#34;&gt;如何使用&lt;/h2&gt;

&lt;h3 id=&#34;配置监听端口:e2cd0391e6bf7f5cd1492cee43ec01af&#34;&gt;配置监听端口&lt;/h3&gt;

&lt;p&gt;支持两种配置方式&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Spring方式&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;beans xmlns=&amp;quot;http://www.springframework.org/schema/beans&amp;quot;
    xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;
    xmlns:reg=&amp;quot;http://www.dangdang.com/schema/ddframe/reg&amp;quot;
    xmlns:job=&amp;quot;http://www.dangdang.com/schema/ddframe/job&amp;quot;
    xsi:schemaLocation=&amp;quot;http://www.springframework.org/schema/beans 
                        http://www.springframework.org/schema/beans/spring-beans.xsd 
                        http://www.dangdang.com/schema/ddframe/reg 
                        http://www.dangdang.com/schema/ddframe/reg/reg.xsd 
                        http://www.dangdang.com/schema/ddframe/job 
                        http://www.dangdang.com/schema/ddframe/job/job.xsd 
                        &amp;quot;&amp;gt;
    &amp;lt;!--配置作业注册中心 --&amp;gt;
    &amp;lt;reg:zookeeper id=&amp;quot;regCenter&amp;quot; server-lists=&amp;quot; yourhost:2181&amp;quot; namespace=&amp;quot;dd-job&amp;quot; base-sleep-time-milliseconds=&amp;quot;1000&amp;quot; max-sleep-time-milliseconds=&amp;quot;3000&amp;quot; max-retries=&amp;quot;3&amp;quot; /&amp;gt;
    
    &amp;lt;!-- 配置作业--&amp;gt;
    &amp;lt;job:simple id=&amp;quot;oneOffElasticJob&amp;quot; monitor-port=&amp;quot;9888&amp;quot; class=&amp;quot;xxx.MyElasticJob&amp;quot; registry-center-ref=&amp;quot;regCenter&amp;quot; cron=&amp;quot;0/10 * * * * ?&amp;quot;   sharding-total-count=&amp;quot;3&amp;quot; sharding-item-parameters=&amp;quot;0=A,1=B,2=C&amp;quot; /&amp;gt;
&amp;lt;/beans&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Java方式&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class JobMain {
    public static void main(final String[] args) {
        // ...
        jobConfig.setMonitorPort(9888);
        // ...
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;启动作业:e2cd0391e6bf7f5cd1492cee43ec01af&#34;&gt;启动作业&lt;/h3&gt;

&lt;h3 id=&#34;执行dump命令:e2cd0391e6bf7f5cd1492cee43ec01af&#34;&gt;执行dump命令&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;dump&lt;/code&gt;命令完全参照&lt;code&gt;Zookeeper&lt;/code&gt;的四字命令理念&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &amp;quot;dump&amp;quot; | nc &amp;lt;任意一台作业服务器IP&amp;gt; 9888
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;../../../../../img/dump/dump.jpg&#34; alt=&#34;dump命令&#34; /&gt;&lt;/p&gt;

&lt;p&gt;导出至文件&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &amp;quot;dump&amp;quot; | nc &amp;lt;任意一台作业服务器IP&amp;gt; 9888 &amp;gt; job_debug.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;使用注意事项:e2cd0391e6bf7f5cd1492cee43ec01af&#34;&gt;使用注意事项&lt;/h2&gt;

&lt;p&gt;务必更新至&lt;code&gt;1.0.3&lt;/code&gt;以上版本&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Elastic-Job事件追踪</title>
      <link>http://dangdangdotcom.github.io/elastic-job/post/user_guide/common/event_trace/</link>
      <pubDate>Tue, 27 Sep 2016 16:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/post/user_guide/common/event_trace/</guid>
      <description>

&lt;h1 id=&#34;elastic-job事件追踪:7df458b8cae687a433cb980ca278ca47&#34;&gt;Elastic-Job事件追踪&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;Elastic-Job&lt;/code&gt;的&lt;code&gt;Lite&lt;/code&gt;版和&lt;code&gt;Cloud&lt;/code&gt;版都提供了事件追踪功能，可通过事件订阅的方式处理调度过程的重要事件，用于查询、统计和监控。&lt;code&gt;Elastic-Job&lt;/code&gt;目前提供了基于关系型数据库两种事件订阅方式记录事件。&lt;/p&gt;

&lt;h2 id=&#34;基于关系型数据库的事件追踪:7df458b8cae687a433cb980ca278ca47&#34;&gt;基于关系型数据库的事件追踪&lt;/h2&gt;

&lt;p&gt;通过配置开启。具体配置方式请分别参见&lt;a href=&#34;../../lite/dev_guide/&#34;&gt;Elastic-Job-Lite开发指南&lt;/a&gt;和&lt;a href=&#34;../../cloud/scheduler_guide/&#34;&gt;Elastic-Job-Cloud-Scheduler启动指南&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;事件追踪的&lt;code&gt;event_trace_rdb_url&lt;/code&gt;属性对应库自动创建&lt;code&gt;JOB_EXECUTION_LOG&lt;/code&gt;和&lt;code&gt;JOB_STATUS_TRACE_LOG&lt;/code&gt;两张表以及若干索引。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;JOB_EXECUTION_LOG&lt;/code&gt;字段含义&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;字段名称&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;字段类型&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;是否必填&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;id&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;VARCHAR(40)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;是&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;主键&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;job_name&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;VARCHAR(100)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;是&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;作业名称&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;task_id&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;VARCHAR(1000)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;是&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;任务名称,每次作业运行生成新任务&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;hostname&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;VARCHAR(255)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;是&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;主机名称&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ip&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;VARCHAR(50)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;是&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;主机IP&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;sharding_item&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;INT&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;是&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;分片项&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;execution_source&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;VARCHAR(20)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;是&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;作业执行来源。可选值为&lt;code&gt;NORMAL_TRIGGER&lt;/code&gt;, &lt;code&gt;MISFIRE&lt;/code&gt;, &lt;code&gt;FAILOVER&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;failure_cause&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;VARCHAR(2000)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;否&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;执行失败原因&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;is_success&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BIT&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;是&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;是否执行成功&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;start_time&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;TIMESTAMP&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;是&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;作业开始执行时间&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;complete_time&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;TIMESTAMP&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;否&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;作业结束执行时间&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;code&gt;JOB_EXECUTION_LOG&lt;/code&gt;记录每次作业的执行历史。分为两个步骤：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;作业开始执行时向数据库插入数据，除&lt;code&gt;failure_cause&lt;/code&gt;和&lt;code&gt;complete_time&lt;/code&gt;外的其他字段均不为空。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;作业完成执行时向数据库更新数据，更新&lt;code&gt;is_success&lt;/code&gt;, &lt;code&gt;complete_time&lt;/code&gt;和&lt;code&gt;failure_cause&lt;/code&gt;(如果作业执行失败)。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;code&gt;JOB_STATUS_TRACE_LOG&lt;/code&gt;字段含义&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;字段名称&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;字段类型&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;是否必填&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;id&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;VARCHAR(40)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;是&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;主键&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;job_name&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;VARCHAR(100)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;是&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;作业名称&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;original_task_id&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;VARCHAR(1000)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;是&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;原任务名称&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;task_id&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;VARCHAR(1000)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;是&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;任务名称&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;slave_id&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;VARCHAR(1000)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;是&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;执行作业服务器的名称，&lt;code&gt;Lite&lt;/code&gt;版本为服务器的&lt;code&gt;IP&lt;/code&gt;地址，&lt;code&gt;Cloud&lt;/code&gt;版本为&lt;code&gt;Mesos&lt;/code&gt;执行机主键&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;source&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;VARCHAR(50)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;是&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;任务执行源，可选值为&lt;code&gt;CLOUD_SCHEDULER&lt;/code&gt;, &lt;code&gt;CLOUD_EXECUTOR&lt;/code&gt;, &lt;code&gt;LITE_EXECUTOR&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;execution_type&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;VARCHAR(20)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;是&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;任务执行类型，可选值为&lt;code&gt;NORMAL_TRIGGER&lt;/code&gt;, &lt;code&gt;MISFIRE&lt;/code&gt;, &lt;code&gt;FAILOVER&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;sharding_item&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;VARCHAR(255)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;是&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;分片项集合，多个分片项以逗号分隔&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;state&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;VARCHAR(20)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;是&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;任务执行状态，可选值为&lt;code&gt;TASK_STAGING&lt;/code&gt;, &lt;code&gt;TASK_RUNNING&lt;/code&gt;, &lt;code&gt;TASK_FINISHED&lt;/code&gt;, &lt;code&gt;TASK_KILLED&lt;/code&gt;, &lt;code&gt;TASK_LOST&lt;/code&gt;, &lt;code&gt;TASK_FAILED&lt;/code&gt;, &lt;code&gt;TASK_ERROR&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;message&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;VARCHAR(2000)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;是&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;相关信息&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;creation_time&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;TIMESTAMP&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;是&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;记录创建时间&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;code&gt;JOB_STATUS_TRACE_LOG&lt;/code&gt;记录作业状态变更痕迹表。可通过每次作业运行的&lt;code&gt;task_id&lt;/code&gt;查询作业状态变化的生命周期和运行轨迹。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>