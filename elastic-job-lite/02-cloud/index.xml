<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>02-clouds on </title>
    <link>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/02-cloud/</link>
    <description>Recent content in 02-clouds on </description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 02 Dec 2016 16:06:17 +0800</lastBuildDate>
    
	<atom:link href="http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/02-cloud/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Elastic Job Cloud</title>
      <link>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/02-cloud/index/</link>
      <pubDate>Fri, 02 Dec 2016 16:06:17 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/02-cloud/index/</guid>
      <description> 本章导航  如果想快速体验Elasstic-Job的强大功能，请阅读快速入门。 如果在使用中遇到什么问题，请首先在FAQ中寻找解决问题的答案。 想要在自己的项目中集成Elastic-Job,您一定很关心它能做什么。  </description>
    </item>
    
    <item>
      <title>事件追踪</title>
      <link>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/02-cloud/event_trace/</link>
      <pubDate>Tue, 27 Sep 2016 16:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/02-cloud/event_trace/</guid>
      <description>Elastic-Job的Lite版和Cloud版都提供了事件追踪功能，可通过事件订阅的方式处理调度过程的重要事件，用于查询、统计和监控。Elastic-Job目前提供了基于关系型数据库两种事件订阅方式记录事件。
基于关系型数据库的事件追踪 通过配置开启，具体配置方式请参见Scheduler启动指南。
事件追踪的event_trace_rdb_url属性对应库自动创建JOB_EXECUTION_LOG和JOB_STATUS_TRACE_LOG两张表以及若干索引。
JOB_EXECUTION_LOG字段含义
   字段名称 字段类型 是否必填 描述     id VARCHAR(40) 是 主键   job_name VARCHAR(100) 是 作业名称   task_id VARCHAR(1000) 是 任务名称,每次作业运行生成新任务   hostname VARCHAR(255) 是 主机名称   ip VARCHAR(50) 是 主机IP   sharding_item INT 是 分片项   execution_source VARCHAR(20) 是 作业执行来源。可选值为NORMAL_TRIGGER, MISFIRE, FAILOVER   failure_cause VARCHAR(2000) 否 执行失败原因   is_success BIT 是 是否执行成功   start_time TIMESTAMP 是 作业开始执行时间   complete_time TIMESTAMP 否 作业结束执行时间    JOB_EXECUTION_LOG记录每次作业的执行历史。分为两个步骤：</description>
    </item>
    
    <item>
      <title>使用指南</title>
      <link>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/02-cloud/cloud_index/</link>
      <pubDate>Sat, 27 Aug 2016 16:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/02-cloud/cloud_index/</guid>
      <description> 环境需求 核心概念 开发指南 部署指南 RESTful API Elastic-Job-Cloud-Scheduler启动指南 其他功能 </description>
    </item>
    
    <item>
      <title>环境需求</title>
      <link>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/02-cloud/env_required/</link>
      <pubDate>Wed, 27 Jan 2016 16:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/02-cloud/env_required/</guid>
      <description>环境需求 Java 请使用JDK1.7及其以上版本。详情参见
Zookeeper 请使用Zookeeper 3.4.6及其以上版本。详情参见
Maven 请使用Maven 3.0.4及其以上版本。详情参见
Mesos 请使用Mesos 0.28.0及其以上版本。详情参见</description>
    </item>
    
    <item>
      <title>核心概念</title>
      <link>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/02-cloud/cloud_concepts/</link>
      <pubDate>Mon, 20 Feb 2017 10:38:50 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/02-cloud/cloud_concepts/</guid>
      <description>本文介绍Elastic-Job-Cloud包含的一些核心概念。
Elastic-Job-Cloud-Scheduler Elastic-Job-Cloud-Scheduler表示基于Mesos的Framework，用于资源调度和应用分发，需要独立启动并提供服务。
作业APP 作业APP指作业打包部署后的应用，描述了作业启动需要用到的CPU、内存、启动脚本及应用下载路径等基本信息，每个APP可以包含一个或多个作业。
作业 作业即实际运行的具体任务，和Lite版本一样，包含Simple、Dataflow和Script共3种作业类型，在注册作业前必须先注册作业APP。
资源 资源指作业启动或运行需要用到的CPU、内存，配置在APP维度表示整个应用启动需要用的资源，配置在JOB维度表示每个作业运行需要的资源。</description>
    </item>
    
    <item>
      <title>部署指南</title>
      <link>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/02-cloud/deploy_guide/</link>
      <pubDate>Wed, 27 Jan 2016 16:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/02-cloud/deploy_guide/</guid>
      <description> 部署步骤  启动Zookeeper, Mesos Master/Agent以及Elastic-Job-Cloud-Scheduler。
 将打包之后的作业tar.gz文件放至网络可访问的位置，如：ftp或http。打包的tar.gz文件中Main方法需要调用Elastic-Job-Cloud提供的JobBootstrap.execute方法。
 使用curl命令调用REST API注册APP及作业，详情参见：Elastic-Job-Cloud RESTful API。
  </description>
    </item>
    
    <item>
      <title>Scheduler启动指南</title>
      <link>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/02-cloud/scheduler_guide/</link>
      <pubDate>Wed, 27 Jan 2016 16:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/02-cloud/scheduler_guide/</guid>
      <description>  启动Elastic-Job-Cloud-Scheduler和Mesos指定注册中心的Zookeeper。
 启动Mesos Master和Mesos Agent。
 解压elastic-job-cloud-scheduler-${version}.tar.gz。可通过源码mvn install编译获取。
 执行bin\start.sh脚本启动elastic-job-cloud-scheduler。
  附录  配置：修改conf\elastic-job-cloud-scheduler.properties文件。配置项说明如下：     属性名称 必填 默认值 描述     hostname 是  服务器真实的IP或hostname，不能是127.0.0.1或localhost   user 否  Mesos framework使用的用户名称   mesos_url 是 zk://127.0.0.1:2181/mesos Mesos所使用的Zookeeper地址   zk_servers 是 127.0.0.1:2181 Elastic-Job-Cloud所使用的Zookeeper地址   zk_namespace 否 elastic-job-cloud Elastic-Job-Cloud所使用的Zookeeper命名空间   zk_digest 否  Elastic-Job-Cloud所使用的Zookeeper登录凭证   http_port 是 8899 Restful API所使用的端口号   job_state_queue_size 是 10000 堆积作业最大值, 超过此阀值的堆积作业将直接丢弃。阀值过大可能会导致Zookeeper无响应，应根据实测情况调整   event_trace_rdb_driver 否  作业事件追踪数据库驱动   event_trace_rdb_url 否  作业事件追踪数据库URL   event_trace_rdb_username 否  作业事件追踪数据库用户名   event_trace_rdb_password 否  作业事件追踪数据库密码     停止：不提供停止脚本，可直接使用kill杀进程。  </description>
    </item>
    
    <item>
      <title>高可用模式</title>
      <link>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/02-cloud/high_availability/</link>
      <pubDate>Mon, 15 Feb 2016 16:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/02-cloud/high_availability/</guid>
      <description> 介绍 在生产环境运行Elastic-Job-Cloud-Scheduler时，建议使用高可用模式。 该模式是通过运行几个指向同一个ZooKeeper集群的Elastic-Job-Cloud-Scheduler实例来实现的。 ZooKeeper用于在当前主Elastic-Job-Cloud-Scheduler实例失败的情况下执行领导者选举。 高可用模式需启动至少两个调度器实例来构成集群，集群中只有一个调度器实例提供服务，其他实例处于&amp;rdquo;待命&amp;rdquo;状态。当该实例失败时，集群会选举剩余实例中的一个来继续提供服务。
配置 每个Elastic-Job-Cloud-Scheduler实例必须使用相同的ZooKeeper集群。 例如，如果Zookeeper的Quorum为zk://1.2.3.4:2181,2.3.4.5:2181,3.4.5.6:2181/elastic-job-cloud，则elastic-job-cloud-scheduler.properties中Zookeeper相关配置为：
# Elastic-Job-Cloud&#39;s zookeeper address zk_servers=1.2.3.4:2181,2.3.4.5:2181,3.4.5.6:2181 # Elastic-Job-Cloud&#39;s zookeeper namespace zk_namespace=elastic-job-cloud  </description>
    </item>
    
    <item>
      <title>RESTful API</title>
      <link>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/02-cloud/cloud_restful_api/</link>
      <pubDate>Fri, 17 Feb 2017 14:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/02-cloud/cloud_restful_api/</guid>
      <description>Elastic-Job-Cloud提供APP发布及作业注册等RESTful API可通过curl操作。
发布作业APP url：app
方法：POST
参数类型：application/json
参数列表：
   属性名 类型 是否必填 缺省值 描述     appName String 是  作业应用名称。为Elastic-Job-Cloud的作业应用唯一标识   appURL String 是  作业应用所在路径。必须是可以通过网络访问到的路径   cpuCount double 否 1 作业应用启动所需要的CPU数量   memoryMB double 否 128 作业应用启动所需要的内存MB   bootstrapScript String 是  启动脚本，如：bin\start.sh   appCacheEnable bool 否 true 每次执行作业时是否从缓存中读取应用。禁用则每次执行任务均从应用仓库下载应用至本地   eventTraceSamplingCount int 否 0 常驻作业事件采样率统计条数，默认不采样全部记录。为避免数据量过大，可对频繁调度的常驻作业配置采样率，即作业每执行N次，才会记录作业执行及追踪相关数据    curl -l -H &amp;quot;Content-type: application/json&amp;quot; -X POST -d &#39;{&amp;quot;appName&amp;quot;:&amp;quot;foo_app&amp;quot;,&amp;quot;appURL&amp;quot;:&amp;quot;http://app_host:8080/foo-job.</description>
    </item>
    
    <item>
      <title>开发指南</title>
      <link>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/02-cloud/dev_guide/</link>
      <pubDate>Wed, 27 Jan 2016 16:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/02-cloud/dev_guide/</guid>
      <description>作业开发 Elastic-Job-Lite和Elastic-Job-Cloud提供统一作业接口，开发者仅需对业务作业进行一次开发，之后可根据不同的配置以及部署至不同的Lite或Cloud环境。
Elastic-Job提供Simple、Dataflow和Script 3种作业类型。 方法参数shardingContext包含作业配置、片和运行时信息。可通过getShardingTotalCount(), getShardingItem()等方法分别获取分片总数，运行在本作业服务器的分片序列号等。
1. Simple类型作业 意为简单实现，未经任何封装的类型。需实现SimpleJob接口。该接口仅提供单一方法用于覆盖，此方法将定时执行。与Quartz原生接口相似，但提供了弹性扩缩容和分片等功能。
public class MyElasticJob implements SimpleJob { @Override public void execute(ShardingContext context) { switch (context.getShardingItem()) { case 0: // do something by sharding item 0 break; case 1: // do something by sharding item 1 break; case 2: // do something by sharding item 2 break; // case n: ... } } }  2. Dataflow类型作业 Dataflow类型用于处理数据流，需实现DataflowJob接口。该接口提供2个方法可供覆盖，分别用于抓取(fetchData)和处理(processData)数据。
public class MyElasticJob implements DataflowJob&amp;lt;Foo&amp;gt; { @Override public List&amp;lt;Foo&amp;gt; fetchData(ShardingContext context) { switch (context.</description>
    </item>
    
    <item>
      <title>其他功能</title>
      <link>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/02-cloud/other_features/</link>
      <pubDate>Wed, 27 Jan 2016 16:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/02-cloud/other_features/</guid>
      <description> 运维平台 Elastic-Job-Cloud-Scheduler高可用模式 事件追踪 定制化处理 </description>
    </item>
    
    <item>
      <title>运维平台</title>
      <link>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/02-cloud/cloud_web_console/</link>
      <pubDate>Sat, 07 Jan 2017 16:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/02-cloud/cloud_web_console/</guid>
      <description>运维平台内嵌于elastic-job-cloud-scheduler的jar包中, 无需额外启动WEB付服务器, 可通过修改配置文件中http_port参数来调整启动端口,默认端口为8899，访问地址为http://{your_scheduler_ip}:8899。
功能列表  作业APP管理（发布、修改、查看）
 作业管理（注册、修改、查看以及删除）
 作业状态查看（待运行、运行中、待失效转移）
 作业历史查看（运行轨迹、执行状态、历史dashboard）
  设计理念 运维平台采用纯静态HTML+JS方式与后台的RESTful API交互，通过读取作业注册中心展示作业配置和状态，数据库展现作业运行轨迹及执行状态，或更新作业注册中心数据修改作业配置。</description>
    </item>
    
  </channel>
</rss>