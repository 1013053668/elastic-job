<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on </title>
    <link>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/post/</link>
    <description>Recent content in Posts on </description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 27 Jan 2016 16:14:21 +0800</lastBuildDate>
    
	<atom:link href="http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Release Notes</title>
      <link>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/post/release_notes/</link>
      <pubDate>Wed, 27 Jan 2016 16:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/post/release_notes/</guid>
      <description>Release Notes 2.1.1 新功能  ISSUE #242 Elastic-Job-Cloud支持删除应用及作业功能 ISSUE #243 Elastic-Job-Cloud支持禁用/启用应用及作业功能  功能提升  ISSUE #268 精简POM依赖  缺陷修正  ISSUE #266 Elastic-Job-Lite启动脚本指定端口无效 ISSUE #269 EventTrace失败记录不受采样率影响并且记录失败时间 ISSUE #272 Elastic-Job-Lite界面作业维度，只有全部服务器被禁用时，才应显示为被禁用 ISSUE #275 停掉Zookeeper后，再重启Zookeeper，任务不会继续执行 ISSUE #280 控制台作业历史页面的历史状态显示不正确 ISSUE #283 作业不设置overwrite且本地配置与注册中心不一致时，作业启动的cron应以注册中心为准  2.1.0 新功能  ISSUE #195 Elastic-Job-Lite自诊断并修复分布式不稳定造成的问题 ISSUE #248 Elastic-Job-Lite同一台作业服务器可以行多个相同作业名称的JVM实例(Cloud Native) ISSUE #249 Elastic-Job-Lite运维界面支持事件追踪查询  功能提升  ISSUE #240 Elastic-Job-Lite运维界面重构 ISSUE #262 Elastic-Job-Lite控制台删除作业配置  缺陷修正  ISSUE #237 增加REST API对分片总数不小于1的校验 ISSUE #238 IP正则表达式错误 ISSUE #246 通过JobOperateAPI.</description>
    </item>
    
    <item>
      <title>Elastic-Job-Lite使用指南</title>
      <link>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/post/user_guide/lite/lite_index/</link>
      <pubDate>Sat, 27 Aug 2016 16:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/post/user_guide/lite/lite_index/</guid>
      <description> Elastic-Job-Lite使用指南 环境需求 开发指南 部署指南 配置手册 操作手册 详细功能列表 </description>
    </item>
    
    <item>
      <title>Elastic-Job-Lite环境需求</title>
      <link>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/post/user_guide/lite/env_required/</link>
      <pubDate>Wed, 27 Jan 2016 16:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/post/user_guide/lite/env_required/</guid>
      <description>Elastic-Job-Lite环境需求 Java 请使用JDK1.7及其以上版本。详情参见
Zookeeper 请使用Zookeeper 3.4.6及其以上版本。详情参见
Maven 请使用Maven 3.0.4及其以上版本。详情参见</description>
    </item>
    
    <item>
      <title>Elastic-Job-Lite开发指南</title>
      <link>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/post/user_guide/lite/dev_guide/</link>
      <pubDate>Wed, 27 Jan 2016 16:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/post/user_guide/lite/dev_guide/</guid>
      <description>Elastic-Job-Lite开发指南 1. 作业开发 Elastic-Job-Lite和Elastic-Job-Cloud提供统一作业接口，开发者仅需对业务作业进行一次开发，之后可根据不同的配置以及部署至不同的Lite或Cloud环境。
Elastic-Job提供Simple、Dataflow和Script 3种作业类型。 方法参数shardingContext包含作业配置、片和运行时信息。可通过getShardingTotalCount(), getShardingItem()等方法分别获取分片总数，运行在本作业服务器的分片序列号等。
a. Simple类型作业 意为简单实现，未经任何封装的类型。需实现SimpleJob接口。该接口仅提供单一方法用于覆盖，此方法将定时执行。与Quartz原生接口相似，但提供了弹性扩缩容和分片等功能。
public class MyElasticJob implements SimpleJob { @Override public void execute(ShardingContext context) { switch (context.getShardingItem()) { case 0: // do something by sharding item 0 break; case 1: // do something by sharding item 1 break; case 2: // do something by sharding item 2 break; // case n: ... } } }  b. Dataflow类型作业 Dataflow类型用于处理数据流，需实现DataflowJob接口。该接口提供2个方法可供覆盖，分别用于抓取(fetchData)和处理(processData)数据。
public class MyElasticJob implements DataflowJob&amp;lt;Foo&amp;gt; { @Override public List&amp;lt;Foo&amp;gt; fetchData(ShardingContext context) { switch (context.</description>
    </item>
    
    <item>
      <title>Elastic-Job-Lite部署指南</title>
      <link>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/post/user_guide/lite/deploy_guide/</link>
      <pubDate>Wed, 27 Jan 2016 16:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/post/user_guide/lite/deploy_guide/</guid>
      <description> Elastic-Job-Lite部署指南 应用部署  启动Elastic-Job-Lite指定注册中心的Zookeeper。
 运行包含Elastic-Job-Lite和业务代码的jar文件。不限与jar或war的启动方式。
  运维平台和RESTFul API部署(可选)  解压缩elastic-job-lite-console-${version}.tar.gz并执行bin\start.sh。
 打开浏览器访问http://localhost:8899/即可访问控制台。8899为默认端口号，可通过启动脚本输入-p自定义端口号。
 访问RESTFul API方法同控制台。
 elastic-job-lite-console-${version}.tar.gz可通过mvn install编译获取。
  </description>
    </item>
    
    <item>
      <title>Elastic-Job-Lite配置手册</title>
      <link>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/post/user_guide/lite/config_manual/</link>
      <pubDate>Mon, 21 Mar 2016 16:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/post/user_guide/lite/config_manual/</guid>
      <description>Elastic-Job-Lite配置手册 1. Java Code配置 a. 注册中心配置 用于注册和协调作业分布式行为的组件，目前仅支持Zookeeper。
ZookeeperConfiguration属性详细说明    属性名 类型 构造器注入 缺省值 描述     serverLists String 是  连接Zookeeper服务器的列表
包括IP地址和端口号
多个地址用逗号分隔
如: host1:2181,host2:2181   namespace String 是  Zookeeper的命名空间   baseSleepTimeMilliseconds int 否 1000 等待重试的间隔时间的初始值
单位：毫秒   maxSleepTimeMilliseconds String 否 3000 等待重试的间隔时间的最大值
单位：毫秒   maxRetries String 否 3 最大重试次数   sessionTimeoutMilliseconds boolean 否 60000 会话超时时间
单位：毫秒   connectionTimeoutMilliseconds boolean 否 15000 连接超时时间</description>
    </item>
    
    <item>
      <title>Elastic-Job-Lite操作手册</title>
      <link>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/post/user_guide/lite/operation_manual/</link>
      <pubDate>Mon, 21 Mar 2016 16:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/post/user_guide/lite/operation_manual/</guid>
      <description>Elastic-Job-Lite操作手册 Java API(孵化中) 1. 配置类API JobSettingsAPI 作业配置的API JobSettings getJobSettings(String jobName) 获取作业设置.  Parameters: jobName — 作业名称
 Returns: 作业设置对象
  void updateJobSettings(JobSettings jobSettings) 更新作业设置.  Parameters: jobSettings — 作业设置对象  void removeJobSettings(String jobName) 删除作业设置.  Parameters: jobName — 作业名称  2. 操作类API 2.1 JobOperateAPI 操作作业的API void trigger(Optional&amp;lt;String&amp;gt; jobName, Optional&amp;lt;String&amp;gt; serverIp) 作业立刻执行.作业在不与上次运行中作业冲突的情况下才会启动, 并在启动后自动清理此标记.  Parameters:  jobName — 作业名称 serverIp — 作业服务器IP地址   void disable(Optional&amp;lt;String&amp;gt; jobName, Optional&amp;lt;String&amp;gt; serverIp) 作业禁用.</description>
    </item>
    
    <item>
      <title>Elastic-Job-Lite详细功能列表</title>
      <link>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/post/user_guide/lite/feature_details/</link>
      <pubDate>Wed, 27 Jan 2016 16:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/post/user_guide/lite/feature_details/</guid>
      <description> Elastic-Job-Lite详细功能列表 事件追踪 定制化处理 作业分片策略 作业监听器 自诊断并修复分布式不稳定造成的问题 运维平台 作业运行状态监控 dump作业运行信息 </description>
    </item>
    
    <item>
      <title>Elastic-Job-Lite运维平台</title>
      <link>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/post/user_guide/lite/features/lite_web_console/</link>
      <pubDate>Wed, 27 Jan 2016 16:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/post/user_guide/lite/features/lite_web_console/</guid>
      <description> Elastic-Job-Lite运维平台 解压缩elastic-job-lite-console-${version}.tar.gz并执行bin\start.sh。打开浏览器访问http://localhost:8899/即可访问控制台。8899为默认端口号，可通过启动脚本输入-p自定义端口号。
elastic-job-lite-console-${version}.tar.gz可通过mvn install编译获取。
登录 默认用户名和密码是root/root，可通过conf\auth.properties修改默认登录账户。
功能列表  登录安全控制
 注册中心管理
 快捷修改作业设置
 作业和服务器维度状态查看
 操作作业暂停\恢复、禁用\启用、停止和删除等生命周期
 事件追踪查询
  设计理念 运维平台和elastic-job-lite并无直接关系，是通过读取作业注册中心数据展现作业状态，或更新注册中心数据修改全局配置。
控制台只能控制作业本身是否运行，但不能控制作业进程的启动，因为控制台和作业本身服务器是完全分离的，控制台并不能控制作业服务器。
不支持项  添加作业 作业在首次运行时将自动添加。Elastic-Job-Lite以jar方式启动，并无作业分发功能。如需完全通过运维平台发布作业，请使用Elastic-Job-Cloud。  </description>
    </item>
    
    <item>
      <title>Elastic-Job-Lite作业运行状态监控</title>
      <link>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/post/user_guide/lite/features/lite_execution_monitor/</link>
      <pubDate>Wed, 27 Jan 2016 16:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/post/user_guide/lite/features/lite_execution_monitor/</guid>
      <description>Elastic-Job-Lite作业运行状态监控 通过监听Elastic-Job-Lite的zookeeper注册中心的几个关键节点即可完成作业运行状态监控功能。
监听作业服务器存活 监听job_name\servers\ip_address\job_instance_id\status节点是否存在。该节点为临时节点，如果作业服务器下线，该节点将删除。</description>
    </item>
    
    <item>
      <title>Elastic-Job-Lite作业分片策略</title>
      <link>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/post/user_guide/lite/features/lite_job_strategy/</link>
      <pubDate>Wed, 27 Jan 2016 16:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/post/user_guide/lite/features/lite_job_strategy/</guid>
      <description>Elastic-Job-Lite作业分片策略 框架提供的分片策略 AverageAllocationJobShardingStrategy 全路径：
com.dangdang.ddframe.job.lite.api.strategy.impl.AverageAllocationJobShardingStrategy
策略说明：
基于平均分配算法的分片策略，也是默认的分片策略。
如果分片不能整除，则不能整除的多余分片将依次追加到序号小的服务器。如：
如果有3台服务器，分成9片，则每台服务器分到的分片是：1=[0,1,2], 2=[3,4,5], 3=[6,7,8]
如果有3台服务器，分成8片，则每台服务器分到的分片是：1=[0,1,6], 2=[2,3,7], 3=[4,5]
如果有3台服务器，分成10片，则每台服务器分到的分片是：1=[0,1,2,9], 2=[3,4,5], 3=[6,7,8]
OdevitySortByNameJobShardingStrategy 全路径：
com.dangdang.ddframe.job.lite.api.strategy.impl.OdevitySortByNameJobShardingStrategy
策略说明：
根据作业名的哈希值奇偶数决定IP升降序算法的分片策略。
作业名的哈希值为奇数则IP升序。
作业名的哈希值为偶数则IP降序。
用于不同的作业平均分配负载至不同的服务器。
AverageAllocationJobShardingStrategy的缺点是，一旦分片数小于作业服务器数，作业将永远分配至IP地址靠前的服务器，导致IP地址靠后的服务器空闲。而OdevitySortByNameJobShardingStrategy则可以根据作业名称重新分配服务器负载。如：
如果有3台服务器，分成2片，作业名称的哈希值为奇数，则每台服务器分到的分片是：1=[0], 2=[1], 3=[]
如果有3台服务器，分成2片，作业名称的哈希值为偶数，则每台服务器分到的分片是：3=[0], 2=[1], 1=[]
RotateServerByNameJobShardingStrategy 全路径：
com.dangdang.ddframe.job.lite.api.strategy.impl.RotateServerByNameJobShardingStrategy
策略说明：
根据作业名的哈希值对服务器列表进行轮转的分片策略。
自定义分片策略 实现JobShardingStrategy接口并实现sharding方法，接口方法参数为作业服务器IP列表和分片策略选项，分片策略选项包括作业名称，分片总数以及分片序列号和个性化参数对照表，可以根据需求定制化自己的分片策略。
欢迎将分片策略以插件的形式贡献至com.dangdang.ddframe.job.lite.api.strategy包。
配置分片策略 与配置通常的作业属性相同，在spring命名空间或者JobConfiguration中配置jobShardingStrategyClass属性，属性值是作业分片策略类的全路径。</description>
    </item>
    
    <item>
      <title>Elastic-Job-Lite dump作业运行信息</title>
      <link>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/post/user_guide/lite/features/lite_dump/</link>
      <pubDate>Wed, 27 Jan 2016 16:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/post/user_guide/lite/features/lite_dump/</guid>
      <description>Elastic-Job-Lite dump作业运行信息 使用Elastic-Job-Lite过程中可能会碰到一些分布式问题，导致作业运行不稳定。
由于无法在生产环境调试，通过dump命令可以把作业内部相关信息dump出来，方便开发者debug分析； 另外为了不泄露隐私，已将相关信息中的ip地址以ip1, ip2...的形式过滤，可以在互联网上公开传输环境信息，便于进一步完善Elastic-Job。
如何使用 配置监听端口 支持两种配置方式
 Spring方式  &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt; &amp;lt;beans xmlns=&amp;quot;http://www.springframework.org/schema/beans&amp;quot; xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xmlns:reg=&amp;quot;http://www.dangdang.com/schema/ddframe/reg&amp;quot; xmlns:job=&amp;quot;http://www.dangdang.com/schema/ddframe/job&amp;quot; xsi:schemaLocation=&amp;quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.dangdang.com/schema/ddframe/reg http://www.dangdang.com/schema/ddframe/reg/reg.xsd http://www.dangdang.com/schema/ddframe/job http://www.dangdang.com/schema/ddframe/job/job.xsd &amp;quot;&amp;gt; &amp;lt;!--配置作业注册中心 --&amp;gt; &amp;lt;reg:zookeeper id=&amp;quot;regCenter&amp;quot; server-lists=&amp;quot; yourhost:2181&amp;quot; namespace=&amp;quot;dd-job&amp;quot; base-sleep-time-milliseconds=&amp;quot;1000&amp;quot; max-sleep-time-milliseconds=&amp;quot;3000&amp;quot; max-retries=&amp;quot;3&amp;quot; /&amp;gt; &amp;lt;!-- 配置作业--&amp;gt; &amp;lt;job:simple id=&amp;quot;oneOffElasticJob&amp;quot; monitor-port=&amp;quot;9888&amp;quot; class=&amp;quot;xxx.MyElasticJob&amp;quot; registry-center-ref=&amp;quot;regCenter&amp;quot; cron=&amp;quot;0/10 * * * * ?&amp;quot; sharding-total-count=&amp;quot;3&amp;quot; sharding-item-parameters=&amp;quot;0=A,1=B,2=C&amp;quot; /&amp;gt; &amp;lt;/beans&amp;gt;   Java方式  public class JobMain { public static void main(final String[] args) { // .</description>
    </item>
    
    <item>
      <title>Elastic-Job-Lite作业监听器</title>
      <link>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/post/user_guide/lite/features/lite_job_listener/</link>
      <pubDate>Wed, 27 Jan 2016 16:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/post/user_guide/lite/features/lite_job_listener/</guid>
      <description>Elastic-Job-Lite作业监听器 可通过配置多个任务监听器，在任务执行前和执行后执行监听的方法。监听器分为每台作业节点均执行和分布式场景中仅单一节点执行2种。
1. 每台作业节点均执行的监听 若作业处理作业服务器的文件，处理完成后删除文件，可考虑使用每个节点均执行清理任务。此类型任务实现简单，且无需考虑全局分布式任务是否完成，请尽量使用此类型监听器。
步骤：
 定义监听器  public class MyElasticJobListener implements ElasticJobListener { @Override public void beforeJobExecuted(ShardingContexts shardingContexts) { // do something ... } @Override public void afterJobExecuted(ShardingContexts shardingContexts) { // do something ... } }   将监听器作为参数传入JobScheduler  public class JobMain { public static void main(String[] args) { new JobScheduler(createRegistryCenter(), createJobConfiguration(), new MyElasticJobListener()).init(); } private static CoordinatorRegistryCenter createRegistryCenter() { CoordinatorRegistryCenter regCenter = new ZookeeperRegistryCenter(new ZookeeperConfiguration(&amp;quot;zk_host:2181&amp;quot;, &amp;quot;elastic-job-demo&amp;quot;)); regCenter.</description>
    </item>
    
    <item>
      <title>Elastic-Job-Lite自诊断并修复分布式不稳定造成的问题</title>
      <link>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/post/user_guide/lite/features/lite_job_reconcile/</link>
      <pubDate>Wed, 27 Jan 2016 16:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/post/user_guide/lite/features/lite_job_reconcile/</guid>
      <description>Elastic-Job-Lite自诊断并修复分布式不稳定造成的问题 在分布式的场景下由于网络、时钟等原因，可能导致Zookeeper的数据与真实运行的作业产生不一致，这种不一致通过正向的校验无法完全避免。需要另外启动一个线程定时校验注册中心数据与真实作业状态的一致性，即维持Elastic-Job的最终一致性。
在2.0.6之前的版本中，网络不稳定的环境下Elastic-Job有可能有的作业分片并未执行，重启一下就能修复。在2.0.6，版本中Elastic-Job在提供reconcileIntervalMinutes设置修复状态服务执行间隔分钟数，用于修复作业服务器不一致状态，默认每10分钟检测并修复一次。</description>
    </item>
    
    <item>
      <title>Elastic-Job事件追踪</title>
      <link>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/post/user_guide/common/event_trace/</link>
      <pubDate>Tue, 27 Sep 2016 16:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/post/user_guide/common/event_trace/</guid>
      <description>Elastic-Job事件追踪 Elastic-Job的Lite版和Cloud版都提供了事件追踪功能，可通过事件订阅的方式处理调度过程的重要事件，用于查询、统计和监控。Elastic-Job目前提供了基于关系型数据库两种事件订阅方式记录事件。
开启事件追踪 Lite版通过代码配置 Elastic-Job-Lite在配置中提供了JobEventConfiguration，目前支持数据库方式配置。
// 初始化数据源 DataSource dataSource = ...; // 定义日志数据库事件溯源配置 JobEventConfiguration jobEventRdbConfig = new JobEventRdbConfiguration(dataSource); // 初始化注册中心 CoordinatorRegistryCenter regCenter = ...; // 初始化作业配置 LiteJobConfiguration liteJobConfig = ...; new JobScheduler(regCenter, liteJobConfig, jobEventRdbConfig).init();  Cloud版通过配置文件 基于关系型数据库的事件追踪 通过配置开启。具体配置方式请分别参见Elastic-Job-Lite开发指南和Elastic-Job-Cloud-Scheduler启动指南。
事件追踪的event_trace_rdb_url属性对应库自动创建JOB_EXECUTION_LOG和JOB_STATUS_TRACE_LOG两张表以及若干索引。
JOB_EXECUTION_LOG字段含义
   字段名称 字段类型 是否必填 描述     id VARCHAR(40) 是 主键   job_name VARCHAR(100) 是 作业名称   task_id VARCHAR(1000) 是 任务名称,每次作业运行生成新任务   hostname VARCHAR(255) 是 主机名称   ip VARCHAR(50) 是 主机IP   sharding_item INT 是 分片项   execution_source VARCHAR(20) 是 作业执行来源。可选值为NORMAL_TRIGGER, MISFIRE, FAILOVER   failure_cause VARCHAR(2000) 否 执行失败原因   is_success BIT 是 是否执行成功   start_time TIMESTAMP 是 作业开始执行时间   complete_time TIMESTAMP 否 作业结束执行时间    JOB_EXECUTION_LOG记录每次作业的执行历史。分为两个步骤：</description>
    </item>
    
    <item>
      <title>Elastic-Job定制化处理</title>
      <link>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/post/user_guide/common/customized_hook/</link>
      <pubDate>Tue, 27 Sep 2016 16:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/post/user_guide/common/customized_hook/</guid>
      <description>异常处理 Elastic-Job在配置中提供了JobProperties，可扩展JobExceptionHandler接口，并设置job_exception_handler定制异常处理流程，默认实现是记录日志但不抛出异常。
定制化作业处理线程池 Elastic-Job在配置中提供了JobProperties，可扩展ExecutorServiceHandler接口，并设置executor_service_handler定制线程池。</description>
    </item>
    
    <item>
      <title>Elastic-Job-Cloud使用指南</title>
      <link>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/post/user_guide/cloud/cloud_index/</link>
      <pubDate>Sat, 27 Aug 2016 16:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/post/user_guide/cloud/cloud_index/</guid>
      <description> Elastic-Job-Cloud使用指南 环境需求 核心概念 开发指南 部署指南 RESTful API Elastic-Job-Cloud-Scheduler启动指南 其他功能 </description>
    </item>
    
    <item>
      <title>Elastic-Job-Cloud环境需求</title>
      <link>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/post/user_guide/cloud/env_required/</link>
      <pubDate>Wed, 27 Jan 2016 16:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/post/user_guide/cloud/env_required/</guid>
      <description>环境需求 Java 请使用JDK1.7及其以上版本。详情参见
Zookeeper 请使用Zookeeper 3.4.6及其以上版本。详情参见
Maven 请使用Maven 3.0.4及其以上版本。详情参见
Mesos 请使用Mesos 0.28.0及其以上版本。详情参见</description>
    </item>
    
    <item>
      <title>Elastic-Job-Cloud核心概念</title>
      <link>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/post/user_guide/cloud/cloud_concepts/</link>
      <pubDate>Mon, 20 Feb 2017 10:38:50 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/post/user_guide/cloud/cloud_concepts/</guid>
      <description>本文介绍Elastic-Job-Cloud包含的一些核心概念。
Elastic-Job-Cloud-Scheduler Elastic-Job-Cloud-Scheduler表示基于Mesos的Framework，用于资源调度和应用分发，需要独立启动并提供服务。
作业APP 作业APP指作业打包部署后的应用，描述了作业启动需要用到的CPU、内存、启动脚本及应用下载路径等基本信息，每个APP可以包含一个或多个作业。
作业 作业即实际运行的具体任务，和Lite版本一样，包含Simple、Dataflow和Script共3种作业类型，在注册作业前必须先注册作业APP。
资源 资源指作业启动或运行需要用到的CPU、内存，配置在APP维度表示整个应用启动需要用的资源，配置在JOB维度表示每个作业运行需要的资源。</description>
    </item>
    
    <item>
      <title>Elastic-Job-Cloud部署指南</title>
      <link>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/post/user_guide/cloud/deploy_guide/</link>
      <pubDate>Wed, 27 Jan 2016 16:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/post/user_guide/cloud/deploy_guide/</guid>
      <description> Elastic-Job-Cloud部署指南 部署步骤  启动Zookeeper, Mesos Master/Agent以及Elastic-Job-Cloud-Scheduler。
 将打包之后的作业tar.gz文件放至网络可访问的位置，如：ftp或http。打包的tar.gz文件中Main方法需要调用Elastic-Job-Cloud提供的JobBootstrap.execute方法。
 使用curl命令调用REST API注册APP及作业，详情参见：Elastic-Job-Cloud RESTful API。
  </description>
    </item>
    
    <item>
      <title>Elastic-Job-Cloud-Scheduler启动指南</title>
      <link>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/post/user_guide/cloud/scheduler_guide/</link>
      <pubDate>Wed, 27 Jan 2016 16:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/post/user_guide/cloud/scheduler_guide/</guid>
      <description> Elastic-Job-Cloud-Scheduler启动指南  启动Elastic-Job-Cloud-Scheduler和Mesos指定注册中心的Zookeeper。
 启动Mesos Master和Mesos Agent。
 解压elastic-job-cloud-scheduler-${version}.tar.gz。可通过源码mvn install编译获取。
 执行bin\start.sh脚本启动elastic-job-cloud-scheduler。
  附录  配置：修改conf\elastic-job-cloud-scheduler.properties文件。配置项说明如下：     属性名称 必填 默认值 描述     hostname 是  服务器真实的IP或hostname，不能是127.0.0.1或localhost   user 否  Mesos framework使用的用户名称   mesos_url 是 zk://127.0.0.1:2181/mesos Mesos所使用的Zookeeper地址   zk_servers 是 127.0.0.1:2181 Elastic-Job-Cloud所使用的Zookeeper地址   zk_namespace 否 elastic-job-cloud Elastic-Job-Cloud所使用的Zookeeper命名空间   zk_digest 否  Elastic-Job-Cloud所使用的Zookeeper登录凭证   http_port 是 8899 Restful API所使用的端口号   job_state_queue_size 是 10000 堆积作业最大值, 超过此阀值的堆积作业将直接丢弃。阀值过大可能会导致Zookeeper无响应，应根据实测情况调整   event_trace_rdb_driver 否  作业事件追踪数据库驱动   event_trace_rdb_url 否  作业事件追踪数据库URL   event_trace_rdb_username 否  作业事件追踪数据库用户名   event_trace_rdb_password 否  作业事件追踪数据库密码     停止：不提供停止脚本，可直接使用kill杀进程。  </description>
    </item>
    
    <item>
      <title>Elastic-Job-Cloud-Scheduler高可用模式</title>
      <link>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/post/user_guide/cloud/high_availability/</link>
      <pubDate>Mon, 15 Feb 2016 16:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/post/user_guide/cloud/high_availability/</guid>
      <description> Elastic-Job-Cloud-Scheduler高可用模式 介绍 在生产环境运行Elastic-Job-Cloud-Scheduler时，建议使用高可用模式。 该模式是通过运行几个指向同一个ZooKeeper集群的Elastic-Job-Cloud-Scheduler实例来实现的。 ZooKeeper用于在当前主Elastic-Job-Cloud-Scheduler实例失败的情况下执行领导者选举。 高可用模式需启动至少两个调度器实例来构成集群，集群中只有一个调度器实例提供服务，其他实例处于&amp;rdquo;待命&amp;rdquo;状态。当该实例失败时，集群会选举剩余实例中的一个来继续提供服务。
配置 每个Elastic-Job-Cloud-Scheduler实例必须使用相同的ZooKeeper集群。 例如，如果Zookeeper的Quorum为zk://1.2.3.4:2181,2.3.4.5:2181,3.4.5.6:2181/elastic-job-cloud，则elastic-job-cloud-scheduler.properties中Zookeeper相关配置为：
# Elastic-Job-Cloud&#39;s zookeeper address zk_servers=1.2.3.4:2181,2.3.4.5:2181,3.4.5.6:2181 # Elastic-Job-Cloud&#39;s zookeeper namespace zk_namespace=elastic-job-cloud  </description>
    </item>
    
    <item>
      <title>Elastic-Job-Cloud REST API</title>
      <link>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/post/user_guide/cloud/cloud_restful_api/</link>
      <pubDate>Fri, 17 Feb 2017 14:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/post/user_guide/cloud/cloud_restful_api/</guid>
      <description>Elastic-Job-Cloud RESTful API Elastic-Job-Cloud提供APP发布及作业注册等RESTful API可通过curl操作。
发布作业APP url：app
方法：POST
参数类型：application/json
参数列表：
   属性名 类型 是否必填 缺省值 描述     appName String 是  作业应用名称。为Elastic-Job-Cloud的作业应用唯一标识   appURL String 是  作业应用所在路径。必须是可以通过网络访问到的路径   cpuCount double 否 1 作业应用启动所需要的CPU数量   memoryMB double 否 128 作业应用启动所需要的内存MB   bootstrapScript String 是  启动脚本，如：bin\start.sh   appCacheEnable bool 否 true 每次执行作业时是否从缓存中读取应用。禁用则每次执行任务均从应用仓库下载应用至本地   eventTraceSamplingCount int 否 0 常驻作业事件采样率统计条数，默认不采样全部记录。为避免数据量过大，可对频繁调度的常驻作业配置采样率，即作业每执行N次，才会记录作业执行及追踪相关数据    curl -l -H &amp;quot;Content-type: application/json&amp;quot; -X POST -d &#39;{&amp;quot;appName&amp;quot;:&amp;quot;foo_app&amp;quot;,&amp;quot;appURL&amp;quot;:&amp;quot;http://app_host:8080/foo-job.</description>
    </item>
    
    <item>
      <title>Elastic-Job-Cloud开发指南</title>
      <link>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/post/user_guide/cloud/dev_guide/</link>
      <pubDate>Wed, 27 Jan 2016 16:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/post/user_guide/cloud/dev_guide/</guid>
      <description>Elastic-Job-Cloud开发指南 作业开发 Elastic-Job-Lite和Elastic-Job-Cloud提供统一作业接口，开发者仅需对业务作业进行一次开发，之后可根据不同的配置以及部署至不同的Lite或Cloud环境。
Elastic-Job提供Simple、Dataflow和Script 3种作业类型。 方法参数shardingContext包含作业配置、片和运行时信息。可通过getShardingTotalCount(), getShardingItem()等方法分别获取分片总数，运行在本作业服务器的分片序列号等。
1. Simple类型作业 意为简单实现，未经任何封装的类型。需实现SimpleJob接口。该接口仅提供单一方法用于覆盖，此方法将定时执行。与Quartz原生接口相似，但提供了弹性扩缩容和分片等功能。
public class MyElasticJob implements SimpleJob { @Override public void execute(ShardingContext context) { switch (context.getShardingItem()) { case 0: // do something by sharding item 0 break; case 1: // do something by sharding item 1 break; case 2: // do something by sharding item 2 break; // case n: ... } } }  2. Dataflow类型作业 Dataflow类型用于处理数据流，需实现DataflowJob接口。该接口提供2个方法可供覆盖，分别用于抓取(fetchData)和处理(processData)数据。
public class MyElasticJob implements DataflowJob&amp;lt;Foo&amp;gt; { @Override public List&amp;lt;Foo&amp;gt; fetchData(ShardingContext context) { switch (context.</description>
    </item>
    
    <item>
      <title>Elastic-Job-Cloud其他功能</title>
      <link>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/post/user_guide/cloud/other_features/</link>
      <pubDate>Wed, 27 Jan 2016 16:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/post/user_guide/cloud/other_features/</guid>
      <description> Elastic-Job-Cloud其他功能 运维平台 Elastic-Job-Cloud-Scheduler高可用模式 事件追踪 定制化处理 </description>
    </item>
    
    <item>
      <title>Elastic-Job-Cloud运维平台</title>
      <link>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/post/user_guide/cloud/cloud_web_console/</link>
      <pubDate>Sat, 07 Jan 2017 16:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/post/user_guide/cloud/cloud_web_console/</guid>
      <description>Elastic-Job-Cloud运维平台 运维平台内嵌于elastic-job-cloud-scheduler的jar包中, 无需额外启动WEB付服务器, 可通过修改配置文件中http_port参数来调整启动端口, 默认端口为8899，访问地址为http://{your_scheduler_ip}:8899。
功能列表  作业APP管理（发布、修改、查看）
 作业管理（注册、修改、查看以及删除）
 作业状态查看（待运行、运行中、待失效转移）
 作业历史查看（运行轨迹、执行状态、历史dashboard）
  设计理念 运维平台采用纯静态HTML+JS方式与后台的RESTful API交互，通过读取作业注册中心展示作业配置和状态，数据库展现作业运行轨迹及执行状态，或更新作业注册中心数据修改作业配置。</description>
    </item>
    
    <item>
      <title>Elastic-Job-Lite实现原理</title>
      <link>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/post/principles/lite/</link>
      <pubDate>Thu, 28 Jan 2016 16:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/post/principles/lite/</guid>
      <description>Elastic-Job-Lite实现原理 弹性分布式实现  第一台服务器上线触发主服务器选举。主服务器一旦下线，则重新触发选举，选举过程中阻塞，只有主服务器选举完成，才会执行其他任务。
 某作业服务器上线时会自动将服务器信息注册到注册中心，下线时会自动更新服务器状态。
 主节点选举，服务器上下线，分片总数变更均更新重新分片标记。
 定时任务触发时，如需重新分片，则通过主服务器分片，分片过程中阻塞，分片结束后才可执行任务。如分片过程中主服务器下线，则先选举主服务器，再分片。
 通过上一项说明可知，为了维持作业运行时的稳定性，运行过程中只会标记分片状态，不会重新分片。分片仅可能发生在下次任务触发前。
 每次分片都会按服务器IP排序，保证分片结果不会产生较大波动。
 实现失效转移功能，在某台服务器执行完毕后主动抓取未分配的分片，并且在某台服务器下线后主动寻找可用的服务器执行任务。
  注册中心数据结构 注册中心在定义的命名空间下，创建作业名称节点，用于区分不同作业，所以作业一旦创建则不能修改作业名称，如果修改名称将视为新的作业。作业名称节点下又包含4个数据子节点，分别是config, instances, sharding, servers和leader。
config节点 作业配置信息，以JSON格式存储
instances节点 作业运行实例信息，子节点是当前作业运行实例的主键。作业运行实例主键由作业运行服务器的IP地址和UUID构成。作业运行实例主键均为临时节点，当作业实例上线时注册，下线时自动清理。注册中心监控这些节点的变化来协调分布式作业的分片以及高可用。 可在作业运行实例节点写入TRIGGER表示该实例立即执行一次。
sharding节点 作业分片信息，子节点是分片项序号，从零开始，至分片总数减一。分片项序号的子节点存储详细信息。每个分片项下的子节点用于控制和记录分片运行状态。节点详细信息说明：
   子节点名 临时节点 描述     instance 否 执行该分片项的作业运行实例主键   running 是 分片项正在运行的状态
如果没有此节点，并且没有completed节点，表示该分片未运行
仅配置monitorExecution时有效   completed 否 分片项运行完成的状态
下次作业开始执行时会清理
仅配置monitorExecution时有效   failover 是 如果该分片项被失效转移分配给其他作业服务器，则此节点值记录执行此分片的作业服务器IP   misfire 否 是否开启错过任务重新执行   disabled 否 是否禁用此分片项    servers节点 作业服务器信息，子节点是作业服务器的IP地址。可在IP地址节点写入DISABLED表示该服务器禁用。 在新的cloud native架构下，servers节点大幅弱化，仅包含控制服务器是否可以禁用这一功能。为了更加纯粹的实现job核心，servers功能未来可能删除，控制服务器是否禁用的能力应该下放至自动化部署系统。</description>
    </item>
    
    <item>
      <title>1.x Release Notes</title>
      <link>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/post/1.x/release_notes/</link>
      <pubDate>Wed, 27 Jan 2016 16:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/post/1.x/release_notes/</guid>
      <description>Release Notes 1.1.1 结构调整  ISSUE #116 作业接口的handleJobExecutionException参数变更  功能提升  ISSUE #110 手动触发作业  缺陷修正  ISSUE #99 删除作业异步导致作业删除后, 还未结束的作业继续创建zk数据  1.1.0 结构调整  ISSUE #97 JobConfiguration重构为SimpleJobConfiguration，DataFlowJobConfiguration，ScriptJobConfiguration ISSUE #102 重新定义Java/Spring Config API，使用Factory+Builder模式代替原有的Constructor+Setter模式 ISSUE #104 移除@Deprecated代码 ISSUE #105 重构Spring命名空间驼峰式定义 ISSUE #106 isStreaming配置化 ISSUE #107 reg-center更名为registry-center-ref  1.0.8 新功能  ISSUE #95 增加脚本类型作业支持  1.0.7 结构调整  ISSUE #88 stop作业改名为pause  新功能  ISSUE #91 作业生命周期操作API  功能提升  ISSUE #84 控制台提供作业启用/禁用按钮操作 ISSUE #87 调整主节点选举流程，作业关闭，禁用和暂停将触发主节点选举 ISSUE #93 注册中心配置提供baseSleepTimeMilliseconds、maxSleepTimeMilliseconds和maxRetries的默认值  缺陷修正  ISSUE #92 修改分片总数参数导致仅单一节点执行的监听抛出超时异常  1.</description>
    </item>
    
    <item>
      <title>1.x elastic-job 1.1.0升级说明</title>
      <link>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/post/1.x/update_notes_1.1.0/</link>
      <pubDate>Tue, 07 Jun 2016 16:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/post/1.x/update_notes_1.1.0/</guid>
      <description> elastic-job 1.1.0升级说明  基于扩展性提升，概念明晰和命名规范化的考虑，elastic-job 1.1.0版本决定抛弃原有包袱的束缚，重新定义了JAVA API，Spring命名空间并且删除了已废弃的API。
 elastic-job 1.1.0作为里程碑版本发布，除了API改动并未做功能上的修改，希望通过标准化配置的方式为未来的新elastic-job功能的开发打下良好的基础。
  重新定义JAVA API  变更JobConfiguration类为接口，通过工厂方法配合构建者模式为每种作业类型分别提供了配置实现类。
 取消DataFlowElasticJob接口中isStreamingProcess的方法签名，归入DataFlow型作业配置，默认值为false非流式处理。
  重新定义Spring命名空间  删除&amp;lt;job:bean&amp;gt;，细化为&amp;lt;job:simple&amp;gt;, &amp;lt;job:dataflow&amp;gt;, &amp;lt;job:script&amp;gt;具体类型。
 Spring命名空间属性由驼峰式修正为Spring命名空间标准命名规范(多单词以-分隔)。
 作业的Spring命名空间属性regCenter变更为registry-center-ref。
  废弃过时API  删除废弃作业类，包括AbstractOneOffElasticJob，AbstractPerpetualElasticJob和AbstractSequencePerpetualElasticJob。
 删除废弃作业调度器类，包括com.dangdang.ddframe.job.schedule.JobController和com.dangdang.ddframe.job.spring.schedule.SpringJobController。
 不再支持非Spring命名空间通过xml方式配置bean，如有需要请使用Spring Java Config。
  </description>
    </item>
    
    <item>
      <title>1.x 何为分布式作业？</title>
      <link>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/post/1.x/distribution/</link>
      <pubDate>Wed, 27 Jan 2016 16:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/post/1.x/distribution/</guid>
      <description>何为分布式作业？ 分片概念 任务的分布式执行，需要将一个任务拆分为n个独立的任务项，然后由分布式的服务器分别执行某一个或几个分片项。
例如：有一个遍历数据库某张表的作业，现有2台服务器。为了快速的执行作业，那么每台服务器应执行作业的50%。 为满足此需求，可将作业分成2片，每台服务器执行1片。作业遍历数据的逻辑应为：服务器A遍历ID以奇数结尾的数据；服务器B遍历ID以偶数结尾的数据。 如果分成10片，则作业遍历数据的逻辑应为：每片分到的分片项应为ID%10，而服务器A被分配到分片项0,1,2,3,4；服务器B被分配到分片项5,6,7,8,9，直接的结果就是服务器A遍历ID以0-4结尾的数据；服务器B遍历ID以5-9结尾的数据。
分片项与业务处理解耦 Elastic-job并不直接提供数据处理的功能，框架只会将分片项分配至各个运行中的作业服务器，开发者需要自行处理分片项与真实数据的对应关系。
分布式作业的执行 Elastic-job并无作业调度中心节点，而是基于部署作业框架的程序在到达相应时间点时各自触发调度。
注册中心仅用于作业注册和监控信息存储。而主作业节点仅用于处理分片和清理等功能。
个性化参数的适用场景 个性化参数即shardingItemParameters，可以和分片项匹配对应关系，用于将分片项的数字转换为更加可读的业务代码。
例如：按照地区水平拆分数据库，数据库A是北京的数据；数据库B是上海的数据；数据库C是广州的数据。 如果仅按照分片项配置，开发者需要了解0表示北京；1表示上海；2表示广州。 合理使用个性化参数可以让代码更可读，如果配置为0=北京,1=上海,2=广州，那么代码中直接使用北京，上海，广州的枚举值即可完成分片项和业务逻辑的对应关系。
作业高可用 Elastic-job提供最安全的方式执行作业。将分片项设置为1，并使用多于1台的服务器执行作业，作业将会以1主n从的方式执行。
一旦执行作业的服务器崩溃，等待执行的服务器将会在下次作业启动时替补执行。 开启失效转移功能效果更好，可以保证在本次作业执行时崩溃，备机立即启动替补执行。
最大限度利用资源 Elastic-job也提供最灵活的方式，最大限度的提高执行作业的吞吐量。将分片项设置为大于服务器的数量，最好是大于服务器倍数的数量，作业将会合理的利用分布式资源，动态的分配分片项。
例如：3台服务器，分成10片，则分片项分配结果为服务器A=0,1,2;服务器B=3,4,5;服务器C=6,7,8,9。 如果服务器C崩溃，则分片项分配结果为服务器A=0,1,2,3,4;服务器B=5,6,7,8,9。在不丢失分片项的情况下，最大限度的利用现有资源提高吞吐量。</description>
    </item>
    
    <item>
      <title>1.x 目录结构说明</title>
      <link>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/post/1.x/directory_structure/</link>
      <pubDate>Wed, 27 Jan 2016 16:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/post/1.x/directory_structure/</guid>
      <description>目录结构说明 elastic-job-core elastic-job核心模块，只通过Quartz和Curator就可执行分布式作业。
elastic-job-api elastic-job生命周期操作的API，可独立使用。
elastic-job-spring elastic-job对spring支持的模块，包括命名空间，依赖注入，占位符等。
elastic-job-console elastic-job web控制台，可将编译之后的war放入tomcat等servlet容器中使用。
elastic-job-example 使用示例。
elastic-job-doc 使用markdown生成文档的项目，使用方无需关注。</description>
    </item>
    
    <item>
      <title>1.x 使用步骤</title>
      <link>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/post/1.x/usage/</link>
      <pubDate>Wed, 27 Jan 2016 16:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/post/1.x/usage/</guid>
      <description> 使用步骤 安装Java环境 请使用JDK1.7及其以上版本。详情参见
安装Zookeeper 请使用Zookeeper 3.4.6及其以上版本。详情参见。或使用elastic-job自带的内嵌Zookeeper
安装Maven 请使用Maven 3.0.4及其以上版本。详情参见
引入elastic-job &amp;lt;!-- 引入elastic-job核心模块 --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.dangdang&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;elastic-job-core&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${latest.release.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!-- 使用springframework自定义命名空间时引入 --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.dangdang&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;elastic-job-spring&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${latest.release.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt;  </description>
    </item>
    
    <item>
      <title>1.x 开发指南</title>
      <link>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/post/1.x/user_guide/</link>
      <pubDate>Wed, 27 Jan 2016 16:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/post/1.x/user_guide/</guid>
      <description>开发指南 代码开发 作业类型 目前提供3种作业类型，分别是Simple, DataFlow和Script。
DataFlow类型用于处理数据流，它又提供2种作业类型，分别是ThroughputDataFlow和SequenceDataFlow。需要继承相应的抽象类。
Script类型用于处理脚本，可直接使用，无需编码。
方法参数shardingContext包含作业配置，分片和运行时信息。可通过getShardingTotalCount(), getShardingItems()等方法分别获取分片总数，运行在本作业服务器的分片序列号集合等。
Simple类型作业 Simple类型作业意为简单实现，未经任何封装的类型。需要继承AbstractSimpleElasticJob，该类只提供了一个方法用于覆盖，此方法将被定时执行。用于执行普通的定时任务，与Quartz原生接口相似，只是增加了弹性扩缩容和分片等功能。
public class MyElasticJob extends AbstractSimpleElasticJob { @Override public void process(JobExecutionMultipleShardingContext context) { // do something by sharding items } }  ThroughputDataFlow类型作业 ThroughputDataFlow类型作业意为高吞吐的数据流作业。需要继承AbstractIndividualThroughputDataFlowElasticJob并可以指定返回值泛型，该类提供3个方法可覆盖，分别用于抓取数据，处理数据和指定是否流式处理数据。可以获取数据处理成功失败次数等辅助监控信息。如果流式处理数据，fetchData方法的返回值只有为null或长度为空时，作业才会停止执行，否则作业会一直运行下去；非流式处理数据则只会在每次作业执行过程中执行一次fetchData方法和processData方法，即完成本次作业。流式数据处理参照TbSchedule设计，适用于不间歇的数据处理。
作业执行时会将fetchData的数据传递给processData处理，其中processData得到的数据是通过多线程（线程池大小可配）拆分的。如果采用流式作业处理方式，建议processData处理数据后更新其状态，避免fetchData再次抓取到，从而使得作业永远不会停止。processData的返回值用于表示数据是否处理成功，抛出异常或者返回false将会在统计信息中归入失败次数，返回true则归入成功次数。
public class MyElasticJob extends AbstractIndividualThroughputDataFlowElasticJob&amp;lt;Foo&amp;gt; { @Override public List&amp;lt;Foo&amp;gt; fetchData(JobExecutionMultipleShardingContext context) { Map&amp;lt;Integer, String&amp;gt; offset = context.getOffsets(); List&amp;lt;Foo&amp;gt; result = // get data from database by sharding items and by offset return result; } @Override public boolean processData(JobExecutionMultipleShardingContext context, Foo data) { // process data // .</description>
    </item>
    
    <item>
      <title>1.x 使用限制</title>
      <link>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/post/1.x/limitations/</link>
      <pubDate>Wed, 27 Jan 2016 16:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/post/1.x/limitations/</guid>
      <description> 使用限制  作业一旦启动成功后不能修改作业名称，如果修改名称则视为新的作业。
 同一台作业服务器只能运行一个相同的作业实例，因为作业运行时是按照IP注册和管理的。
 一旦有服务器波动，或者修改分片项，将会触发重新分片；触发重新分片将会导致运行中的流式处理的作业在执行完本次作业后不再继续执行，等待分片结束后再恢复正常。
 开启monitorExecution才能实现分布式作业幂等性（即不会在多个作业服务器运行同一个分片）的功能，但monitorExecution对短时间内执行的作业（如每5秒一触发）性能影响较大，建议关闭并自行实现幂等性。
  </description>
    </item>
    
    <item>
      <title>1.x 运维平台</title>
      <link>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/post/1.x/web_console/</link>
      <pubDate>Wed, 27 Jan 2016 16:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/post/1.x/web_console/</guid>
      <description> 运维平台 elastic-job运维平台以war包形式提供，可自行部署到tomcat或jetty等支持servlet的web容器中。
elastic-job-console.war可以通过编译源码或从maven中央仓库获取。
登录 默认用户名和密码是root/root，可以通过修改conf\auth.properties文件修改默认登录用户名和密码。
主要功能  登录安全控制
 注册中心管理
 作业维度状态查看
 服务器维度状态查看
 快捷修改作业设置
 控制作业暂停，恢复运行，停止和删除
  设计理念 运维平台和elastic-job并无直接关系，是通过读取作业注册中心数据展现作业状态，或更新注册中心数据修改全局配置。
控制台只能控制作业本身是否运行，但不能控制作业进程的启停，因为控制台和作业本身服务器是完全分布式的，控制台并不能控制作业服务器。
不支持项  添加作业。因为作业都是在首次运行时自动添加，使用运维平台添加作业并无必要。  主要界面  总览页   注册中心管理页   作业详细信息页   服务器详细信息页  </description>
    </item>
    
    <item>
      <title>1.x 阅读源码编译问题说明</title>
      <link>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/post/1.x/source_code_guide/</link>
      <pubDate>Wed, 27 Jan 2016 16:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/post/1.x/source_code_guide/</guid>
      <description>阅读源码编译问题说明 因为关注极简代码，Elastic-Job使用lombok。在阅读源码的过程中会遇到@Getter, @Setter等注解导致不能编译，请按照以下步骤安装lombok到你的IDE，只使用发布包请不用关注。
lombok安装指南 Eclipse 首先配置好Eclipse环境，然后双击打开lombok.jar文件。
确认Eclipse的安装路径，点击install/update按钮，即可完成安装，最后需要重启Eclipse。
** 如何确认安装成功？**
确认Eclipse安装路径下有lombok.jar包，并且配置文件eclipse.ini中是否已添加如下内容：
-javaagent:lombok.jar -Xbootclasspath/a:lombok.jar  否则请自行将缺少的部分添加到相应的位置即可。
安装完成后可直接使用元注解简化你的POJO。如：
其它IDE 请参照lombok官方提供的解决方案。 Lombok还可以提供很多其他功能，如log变量自动生成等，可参阅lombok官网。</description>
    </item>
    
    <item>
      <title>1.x 实现原理</title>
      <link>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/post/1.x/theory/</link>
      <pubDate>Thu, 28 Jan 2016 16:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/post/1.x/theory/</guid>
      <description>实现原理 弹性分布式实现  第一台服务器上线触发主服务器选举。主服务器一旦下线，则重新触发选举，选举过程中阻塞，只有主服务器选举完成，才会执行其他任务。
 某作业服务器上线时会自动将服务器信息注册到注册中心，下线时会自动更新服务器状态。
 主节点选举，服务器上下线，分片总数变更均更新重新分片标记。
 定时任务触发时，如需重新分片，则通过主服务器分片，分片过程中阻塞，分片结束后才可执行任务。如分片过程中主服务器下线，则先选举主服务器，再分片。
 通过上一项说明可知，为了维持作业运行时的稳定性，运行过程中只会标记分片状态，不会重新分片。分片仅可能发生在下次任务触发前。
 每次分片都会按服务器IP排序，保证分片结果不会产生较大波动。
 实现失效转移功能，在某台服务器执行完毕后主动抓取未分配的分片，并且在某台服务器下线后主动寻找可用的服务器执行任务。
  注册中心数据结构 注册中心在定义的命名空间下，创建作业名称节点，用于区分不同作业，所以作业一旦创建则不能修改作业名称，如果修改名称将视为新的作业。作业名称节点下又包含4个数据子节点，分别是config, servers, execution和leader。
概览 config节点 作业全局配置信息
   子节点名 临时节点 描述     jobClass 否 作业实现类名称   shardingTotalCount 否 作业分片总数   cron 否 作业启动时间的cron表达式   shardingItemParameters 否 分片序列号和个性化参数对照表   jobParameter 否 作业自定义参数   monitorExecution 否 监控作业执行时状态   processCountIntervalSeconds 否 统计作业处理数据数量的间隔时间   concurrentDataProcessThreadCount 否 同时处理数据的并发线程数   fetchDataCount 否 每次抓取的数据量   streaming-process 否 是否流式处理数据</description>
    </item>
    
    <item>
      <title>1.x 作业分片策略</title>
      <link>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/post/1.x/job_strategy/</link>
      <pubDate>Wed, 27 Jan 2016 16:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/post/1.x/job_strategy/</guid>
      <description>作业分片策略 框架提供的分片策略 AverageAllocationJobShardingStrategy 全路径：
com.dangdang.ddframe.job.plugin.sharding.strategy.AverageAllocationJobShardingStrategy
策略说明：
基于平均分配算法的分片策略，也是默认的分片策略。
如果分片不能整除，则不能整除的多余分片将依次追加到序号小的服务器。如：
如果有3台服务器，分成9片，则每台服务器分到的分片是：1=[0,1,2], 2=[3,4,5], 3=[6,7,8]
如果有3台服务器，分成8片，则每台服务器分到的分片是：1=[0,1,6], 2=[2,3,7], 3=[4,5]
如果有3台服务器，分成10片，则每台服务器分到的分片是：1=[0,1,2,9], 2=[3,4,5], 3=[6,7,8]
OdevitySortByNameJobShardingStrategy 全路径：
com.dangdang.ddframe.job.plugin.sharding.strategy.OdevitySortByNameJobShardingStrategy
策略说明：
根据作业名的哈希值奇偶数决定IP升降序算法的分片策略。
作业名的哈希值为奇数则IP升序。
作业名的哈希值为偶数则IP降序。
用于不同的作业平均分配负载至不同的服务器。
AverageAllocationJobShardingStrategy的缺点是，一旦分片数小于作业服务器数，作业将永远分配至IP地址靠前的服务器，导致IP地址靠后的服务器空闲。而OdevitySortByNameJobShardingStrategy则可以根据作业名称重新分配服务器负载。如：
如果有3台服务器，分成2片，作业名称的哈希值为奇数，则每台服务器分到的分片是：1=[0], 2=[1], 3=[]
如果有3台服务器，分成2片，作业名称的哈希值为偶数，则每台服务器分到的分片是：3=[0], 2=[1], 1=[]
RotateServerByNameJobShardingStrategy 全路径：
com.dangdang.ddframe.job.plugin.sharding.strategy.RotateServerByNameJobShardingStrategy
策略说明：
根据作业名的哈希值对服务器列表进行轮转的分片策略。
自定义分片策略 实现JobShardingStrategy接口并实现sharding方法，接口方法参数为作业服务器IP列表和分片策略选项，分片策略选项包括作业名称，分片总数以及分片序列号和个性化参数对照表，可以根据需求定制化自己的分片策略。
欢迎将分片策略以插件的形式贡献至com.dangdang.ddframe.job.plugin.sharding.strategy包。
配置分片策略 与配置通常的作业属性相同，在spring命名空间或者JobConfiguration中配置jobShardingStrategyClass属性，属性值是作业分片策略类的全路径。</description>
    </item>
    
    <item>
      <title>1.x 作业运行状态监控</title>
      <link>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/post/1.x/execution_monitor/</link>
      <pubDate>Wed, 27 Jan 2016 16:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/post/1.x/execution_monitor/</guid>
      <description>作业运行状态监控 通过监听elastic-job的zookeeper注册中心的几个关键节点即可完成作业运行状态监控功能。
监听作业服务器存活 监听job_name\servers\ip_address\status节点是否存在。该节点为临时节点，如果作业服务器下线，该节点将删除。
监听近期数据处理成功 数据流类型作业，可通过监听近期数据处理成功数判断作业流量是否正常。
监听job_name\servers\ip_address\processSuccessCount节点的值。如果小于作业正常处理的阀值，可选择报警。
监听近期数据处理失败 数据流类型作业，可通过监听近期数据处理失败数判断作业处理结果。
监听job_name\servers\ip_address\processFailureCount节点的值。如果大于0，可选择报警。</description>
    </item>
    
    <item>
      <title>1.x dump作业运行信息（便于开发者debug）</title>
      <link>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/post/1.x/dump/</link>
      <pubDate>Wed, 27 Jan 2016 16:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/post/1.x/dump/</guid>
      <description>dump作业运行信息（便于开发者debug） 由于在使用elastic-job中可能会碰到一些分布式问题，导致作业运行不稳定。由于无法在生产环境调试，通过dump命令可以把作业内部相关信息dump出来，方便开发者debug分析；另外为了不泄露隐私，已经把相关信息中的ip地址以ip1, ip2...的形式过滤掉了，可以在互联网上公开传输环境信息，便于进一步完善elastic-job。
如何使用 配置监听端口 支持两种配置方式
 Spring方式  &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt; &amp;lt;beans xmlns=&amp;quot;http://www.springframework.org/schema/beans&amp;quot; xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xmlns:reg=&amp;quot;http://www.dangdang.com/schema/ddframe/reg&amp;quot; xmlns:job=&amp;quot;http://www.dangdang.com/schema/ddframe/job&amp;quot; xsi:schemaLocation=&amp;quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.dangdang.com/schema/ddframe/reg http://www.dangdang.com/schema/ddframe/reg/reg.xsd http://www.dangdang.com/schema/ddframe/job http://www.dangdang.com/schema/ddframe/job/job.xsd &amp;quot;&amp;gt; &amp;lt;!--配置作业注册中心 --&amp;gt; &amp;lt;reg:zookeeper id=&amp;quot;regCenter&amp;quot; server-lists=&amp;quot; yourhost:2181&amp;quot; namespace=&amp;quot;dd-job&amp;quot; base-sleep-time-milliseconds=&amp;quot;1000&amp;quot; max-sleep-time-milliseconds=&amp;quot;3000&amp;quot; max-retries=&amp;quot;3&amp;quot; /&amp;gt; &amp;lt;!-- 配置作业--&amp;gt; &amp;lt;job:simple id=&amp;quot;oneOffElasticJob&amp;quot; monitor-port=&amp;quot;9888&amp;quot; class=&amp;quot;xxx.MyElasticJob&amp;quot; registry-center-ref=&amp;quot;regCenter&amp;quot; cron=&amp;quot;0/10 * * * * ?&amp;quot; sharding-total-count=&amp;quot;3&amp;quot; sharding-item-parameters=&amp;quot;0=A,1=B,2=C&amp;quot; /&amp;gt; &amp;lt;/beans&amp;gt;   Java方式  public class JobMain { public static void main(final String[] args) { // ... jobConfig.</description>
    </item>
    
    <item>
      <title>1.x 快速上手</title>
      <link>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/post/1.x/quick_start/</link>
      <pubDate>Wed, 27 Jan 2016 16:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/post/1.x/quick_start/</guid>
      <description>快速上手 下载源码和文档 https://github.com/dangdangdotcom/elastic-job
选择 tags\1.0.2 作为源码
其中，需要用elastic-job-example来做应用例子，自行安装Zookeeper来做注册中心。
安装lombok 开发代码省略了 set get log等，需要安装此包才不会报错。
lombok的官方网址：http://projectlombok.org/
lombok安装
使用lombok是需要安装的，如果不安装，IDE则无法解析lombok注解。先在官网下载最新版本的JAR包，现在是0.11.2版本，我用的是0.11.0。第一次使用的时候我下载的是最新版本的，也就是我现在用的0.11.0，到现在已经更新了两个版本，更新的好快啊……
可以用以下两种方式安装：
 双击下载下来的JAR包安装lombok。 eclipse/myeclipse手动安装lombok。  将lombok.jar复制到myeclipse.ini/eclipse.ini所在的文件夹目录下 打开eclipse.ini/myeclipse.ini，在最后面插入以下两行并保存：   -Xbootclasspath/a:lombok.jar -javaagent:lombok.jar  最后重启eclipse/myeclipse
Zookeeper的安装和配置 参考资料：http://blog.csdn.net/shatelang/article/details/7596007
快速配置  下载解压到指定目录 配置bin：zkServer.cmd(zkServer.sh)，默认不需要修改，默认读zoo.cfg 配置conf：zoo.cfg（注意log dataDir目录须先建）  tickTime=2000 initLimit=10 syncLimit=5 dataDir=D:\\javawork\\zookeeper-3.4.6\\data dataLogDir=D:\\javawork\\zookeeper-3.4.6\\log clientPort=2181   启动：zkServer.cmd(zkServer.sh)，无报错。 验证：JPS，存在QuorumPeerMain为已启动；验证端口netstat -ano|findstr 2181   客户端命令  echo ruok|nc 127.0.0.1 2181 zkCli –server 127.0.0.1:2181 zkCli.cmd –server 127.0.0.1:2181 zkCli.cmd –server 127.0.0.1:2182 zkCli.cmd –server 127.0.0.1:2183 zkCli.</description>
    </item>
    
  </channel>
</rss>