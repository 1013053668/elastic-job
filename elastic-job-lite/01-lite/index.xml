<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>01-lites on </title>
    <link>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/01-lite/</link>
    <description>Recent content in 01-lites on </description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 02 Dec 2016 16:06:17 +0800</lastBuildDate>
    
	<atom:link href="http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/01-lite/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Elastic Job Lite</title>
      <link>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/01-lite/index/</link>
      <pubDate>Fri, 02 Dec 2016 16:06:17 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/01-lite/index/</guid>
      <description> 本章导航  如果想快速体验Elastic-Job-Lite的强大功能，请阅读快速入门。 如果在使用中遇到什么问题，请首先在FAQ中寻找解决问题的答案。 想要在自己的项目中集成Elastic-Job,您一定很关心它能做什么。  </description>
    </item>
    
    <item>
      <title>快速入门</title>
      <link>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/01-lite/quick-start/</link>
      <pubDate>Thu, 06 Apr 2017 22:38:50 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/01-lite/quick-start/</guid>
      <description>Elastic-Job-Lite 引入maven依赖 &amp;lt;!-- 引入elastic-job-lite核心模块 --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.dangdang&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;elastic-job-lite-core&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${latest.release.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!-- 使用springframework自定义命名空间时引入 --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.dangdang&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;elastic-job-lite-spring&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${latest.release.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt;  作业开发 public class MyElasticJob implements SimpleJob { @Override public void execute(ShardingContext context) { switch (context.getShardingItem()) { case 0: // do something by sharding item 0 break; case 1: // do something by sharding item 1 break; case 2: // do something by sharding item 2 break; // case n: ... } } }  作业配置 &amp;lt;?</description>
    </item>
    
    <item>
      <title>使用指南</title>
      <link>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/01-lite/lite_index/</link>
      <pubDate>Sat, 27 Aug 2016 16:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/01-lite/lite_index/</guid>
      <description> 环境需求 开发指南 部署指南 配置手册 操作手册 详细功能列表 </description>
    </item>
    
    <item>
      <title>环境需求</title>
      <link>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/01-lite/env_required/</link>
      <pubDate>Wed, 27 Jan 2016 16:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/01-lite/env_required/</guid>
      <description>Java 请使用JDK1.7及其以上版本。详情参见
Zookeeper 请使用Zookeeper 3.4.6及其以上版本。详情参见
Maven 请使用Maven 3.0.4及其以上版本。详情参见</description>
    </item>
    
    <item>
      <title>开发指南</title>
      <link>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/01-lite/dev_guide/</link>
      <pubDate>Wed, 27 Jan 2016 16:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/01-lite/dev_guide/</guid>
      <description>1. 作业开发 Elastic-Job-Lite和Elastic-Job-Cloud提供统一作业接口，开发者仅需对业务作业进行一次开发，之后可根据不同的配置以及部署至不同的Lite或Cloud环境。
Elastic-Job提供Simple、Dataflow和Script 3种作业类型。 方法参数shardingContext包含作业配置、片和运行时信息。可通过getShardingTotalCount(), getShardingItem()等方法分别获取分片总数，运行在本作业服务器的分片序列号等。
a. Simple类型作业 意为简单实现，未经任何封装的类型。需实现SimpleJob接口。该接口仅提供单一方法用于覆盖，此方法将定时执行。与Quartz原生接口相似，但提供了弹性扩缩容和分片等功能。
public class MyElasticJob implements SimpleJob { @Override public void execute(ShardingContext context) { switch (context.getShardingItem()) { case 0: // do something by sharding item 0 break; case 1: // do something by sharding item 1 break; case 2: // do something by sharding item 2 break; // case n: ... } } }  b. Dataflow类型作业 Dataflow类型用于处理数据流，需实现DataflowJob接口。该接口提供2个方法可供覆盖，分别用于抓取(fetchData)和处理(processData)数据。
public class MyElasticJob implements DataflowJob&amp;lt;Foo&amp;gt; { @Override public List&amp;lt;Foo&amp;gt; fetchData(ShardingContext context) { switch (context.</description>
    </item>
    
    <item>
      <title>部署指南</title>
      <link>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/01-lite/deploy_guide/</link>
      <pubDate>Wed, 27 Jan 2016 16:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/01-lite/deploy_guide/</guid>
      <description> 应用部署  启动Elastic-Job-Lite指定注册中心的Zookeeper。
 运行包含Elastic-Job-Lite和业务代码的jar文件。不限与jar或war的启动方式。
  运维平台和RESTFul API部署(可选)  解压缩elastic-job-lite-console-${version}.tar.gz并执行bin\start.sh。
 打开浏览器访问http://localhost:8899/即可访问控制台。8899为默认端口号，可通过启动脚本输入-p自定义端口号。
 访问RESTFul API方法同控制台。
 elastic-job-lite-console-${version}.tar.gz可通过mvn install编译获取。
  </description>
    </item>
    
    <item>
      <title>配置手册</title>
      <link>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/01-lite/config_manual/</link>
      <pubDate>Mon, 21 Mar 2016 16:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/01-lite/config_manual/</guid>
      <description>1. Java Code配置 a. 注册中心配置 用于注册和协调作业分布式行为的组件，目前仅支持Zookeeper。
ZookeeperConfiguration属性详细说明    属性名 类型 构造器注入 缺省值 描述     serverLists String 是  连接Zookeeper服务器的列表
包括IP地址和端口号
多个地址用逗号分隔
如: host1:2181,host2:2181   namespace String 是  Zookeeper的命名空间   baseSleepTimeMilliseconds int 否 1000 等待重试的间隔时间的初始值
单位：毫秒   maxSleepTimeMilliseconds String 否 3000 等待重试的间隔时间的最大值
单位：毫秒   maxRetries String 否 3 最大重试次数   sessionTimeoutMilliseconds boolean 否 60000 会话超时时间
单位：毫秒   connectionTimeoutMilliseconds boolean 否 15000 连接超时时间</description>
    </item>
    
    <item>
      <title>操作手册</title>
      <link>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/01-lite/operation_manual/</link>
      <pubDate>Mon, 21 Mar 2016 16:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/01-lite/operation_manual/</guid>
      <description>Java API(孵化中) 1. 配置类API JobSettingsAPI 作业配置的API JobSettings getJobSettings(String jobName) 获取作业设置.  Parameters: jobName — 作业名称
 Returns: 作业设置对象
  void updateJobSettings(JobSettings jobSettings) 更新作业设置.  Parameters: jobSettings — 作业设置对象  void removeJobSettings(String jobName) 删除作业设置.  Parameters: jobName — 作业名称  2. 操作类API 2.1 JobOperateAPI 操作作业的API void trigger(Optional&amp;lt;String&amp;gt; jobName, Optional&amp;lt;String&amp;gt; serverIp) 作业立刻执行.作业在不与上次运行中作业冲突的情况下才会启动, 并在启动后自动清理此标记.  Parameters:  jobName — 作业名称 serverIp — 作业服务器IP地址   void disable(Optional&amp;lt;String&amp;gt; jobName, Optional&amp;lt;String&amp;gt; serverIp) 作业禁用.会重新分片.  Parameters:  jobName — 作业名称 serverIp — 作业服务器IP地址   void enable(Optional&amp;lt;String&amp;gt; jobName, Optional&amp;lt;String&amp;gt; serverIp) 作业启用.</description>
    </item>
    
    <item>
      <title>详细功能列表</title>
      <link>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/01-lite/feature_details/</link>
      <pubDate>Wed, 27 Jan 2016 16:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/01-lite/feature_details/</guid>
      <description> 事件追踪 定制化处理 作业分片策略 作业监听器 自诊断并修复分布式不稳定造成的问题 运维平台 作业运行状态监控 dump作业运行信息 </description>
    </item>
    
    <item>
      <title>运维平台</title>
      <link>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/01-lite/features/lite_web_console/</link>
      <pubDate>Wed, 27 Jan 2016 16:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/01-lite/features/lite_web_console/</guid>
      <description> 解压缩elastic-job-lite-console-${version}.tar.gz并执行bin\start.sh。打开浏览器访问http://localhost:8899/即可访问控制台。8899为默认端口号，可通过启动脚本输入-p自定义端口号。
elastic-job-lite-console-${version}.tar.gz可通过mvn install编译获取。
登录 默认用户名和密码是root/root，可通过conf\auth.properties修改默认登录账户。
功能列表  登录安全控制
 注册中心管理
 快捷修改作业设置
 作业和服务器维度状态查看
 操作作业暂停\恢复、禁用\启用、停止和删除等生命周期
 事件追踪查询
  设计理念 运维平台和elastic-job-lite并无直接关系，是通过读取作业注册中心数据展现作业状态，或更新注册中心数据修改全局配置。
控制台只能控制作业本身是否运行，但不能控制作业进程的启动，因为控制台和作业本身服务器是完全分离的，控制台并不能控制作业服务器。
不支持项  添加作业 作业在首次运行时将自动添加。Elastic-Job-Lite以jar方式启动，并无作业分发功能。如需完全通过运维平台发布作业，请使用Elastic-Job-Cloud。  </description>
    </item>
    
    <item>
      <title>作业运行状态监控</title>
      <link>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/01-lite/features/lite_execution_monitor/</link>
      <pubDate>Wed, 27 Jan 2016 16:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/01-lite/features/lite_execution_monitor/</guid>
      <description>通过监听Elastic-Job-Lite的zookeeper注册中心的几个关键节点即可完成作业运行状态监控功能。
监听作业服务器存活 监听job_name\servers\ip_address\job_instance_id\status节点是否存在。该节点为临时节点，如果作业服务器下线，该节点将删除。</description>
    </item>
    
    <item>
      <title>作业分片策略</title>
      <link>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/01-lite/features/lite_job_strategy/</link>
      <pubDate>Wed, 27 Jan 2016 16:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/01-lite/features/lite_job_strategy/</guid>
      <description>框架提供的分片策略 AverageAllocationJobShardingStrategy 全路径：
com.dangdang.ddframe.job.lite.api.strategy.impl.AverageAllocationJobShardingStrategy
策略说明：
基于平均分配算法的分片策略，也是默认的分片策略。
如果分片不能整除，则不能整除的多余分片将依次追加到序号小的服务器。如：
如果有3台服务器，分成9片，则每台服务器分到的分片是：1=[0,1,2], 2=[3,4,5], 3=[6,7,8]
如果有3台服务器，分成8片，则每台服务器分到的分片是：1=[0,1,6], 2=[2,3,7], 3=[4,5]
如果有3台服务器，分成10片，则每台服务器分到的分片是：1=[0,1,2,9], 2=[3,4,5], 3=[6,7,8]
OdevitySortByNameJobShardingStrategy 全路径：
com.dangdang.ddframe.job.lite.api.strategy.impl.OdevitySortByNameJobShardingStrategy
策略说明：
根据作业名的哈希值奇偶数决定IP升降序算法的分片策略。
作业名的哈希值为奇数则IP升序。
作业名的哈希值为偶数则IP降序。
用于不同的作业平均分配负载至不同的服务器。
AverageAllocationJobShardingStrategy的缺点是，一旦分片数小于作业服务器数，作业将永远分配至IP地址靠前的服务器，导致IP地址靠后的服务器空闲。而OdevitySortByNameJobShardingStrategy则可以根据作业名称重新分配服务器负载。如：
如果有3台服务器，分成2片，作业名称的哈希值为奇数，则每台服务器分到的分片是：1=[0], 2=[1], 3=[]
如果有3台服务器，分成2片，作业名称的哈希值为偶数，则每台服务器分到的分片是：3=[0], 2=[1], 1=[]
RotateServerByNameJobShardingStrategy 全路径：
com.dangdang.ddframe.job.lite.api.strategy.impl.RotateServerByNameJobShardingStrategy
策略说明：
根据作业名的哈希值对服务器列表进行轮转的分片策略。
自定义分片策略 实现JobShardingStrategy接口并实现sharding方法，接口方法参数为作业服务器IP列表和分片策略选项，分片策略选项包括作业名称，分片总数以及分片序列号和个性化参数对照表，可以根据需求定制化自己的分片策略。
欢迎将分片策略以插件的形式贡献至com.dangdang.ddframe.job.lite.api.strategy包。
配置分片策略 与配置通常的作业属性相同，在spring命名空间或者JobConfiguration中配置jobShardingStrategyClass属性，属性值是作业分片策略类的全路径。</description>
    </item>
    
    <item>
      <title>dump作业运行信息</title>
      <link>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/01-lite/features/lite_dump/</link>
      <pubDate>Wed, 27 Jan 2016 16:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/01-lite/features/lite_dump/</guid>
      <description>使用Elastic-Job-Lite过程中可能会碰到一些分布式问题，导致作业运行不稳定。
由于无法在生产环境调试，通过dump命令可以把作业内部相关信息dump出来，方便开发者debug分析； 另外为了不泄露隐私，已将相关信息中的ip地址以ip1, ip2...的形式过滤，可以在互联网上公开传输环境信息，便于进一步完善Elastic-Job。
如何使用 配置监听端口 支持两种配置方式
 Spring方式  &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt; &amp;lt;beans xmlns=&amp;quot;http://www.springframework.org/schema/beans&amp;quot; xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xmlns:reg=&amp;quot;http://www.dangdang.com/schema/ddframe/reg&amp;quot; xmlns:job=&amp;quot;http://www.dangdang.com/schema/ddframe/job&amp;quot; xsi:schemaLocation=&amp;quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.dangdang.com/schema/ddframe/reg http://www.dangdang.com/schema/ddframe/reg/reg.xsd http://www.dangdang.com/schema/ddframe/job http://www.dangdang.com/schema/ddframe/job/job.xsd &amp;quot;&amp;gt; &amp;lt;!--配置作业注册中心 --&amp;gt; &amp;lt;reg:zookeeper id=&amp;quot;regCenter&amp;quot; server-lists=&amp;quot; yourhost:2181&amp;quot; namespace=&amp;quot;dd-job&amp;quot; base-sleep-time-milliseconds=&amp;quot;1000&amp;quot; max-sleep-time-milliseconds=&amp;quot;3000&amp;quot; max-retries=&amp;quot;3&amp;quot; /&amp;gt; &amp;lt;!-- 配置作业--&amp;gt; &amp;lt;job:simple id=&amp;quot;oneOffElasticJob&amp;quot; monitor-port=&amp;quot;9888&amp;quot; class=&amp;quot;xxx.MyElasticJob&amp;quot; registry-center-ref=&amp;quot;regCenter&amp;quot; cron=&amp;quot;0/10 * * * * ?&amp;quot; sharding-total-count=&amp;quot;3&amp;quot; sharding-item-parameters=&amp;quot;0=A,1=B,2=C&amp;quot; /&amp;gt; &amp;lt;/beans&amp;gt;   Java方式  public class JobMain { public static void main(final String[] args) { // .</description>
    </item>
    
    <item>
      <title>作业监听器</title>
      <link>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/01-lite/features/lite_job_listener/</link>
      <pubDate>Wed, 27 Jan 2016 16:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/01-lite/features/lite_job_listener/</guid>
      <description>可通过配置多个任务监听器，在任务执行前和执行后执行监听的方法。监听器分为每台作业节点均执行和分布式场景中仅单一节点执行2种。
1. 每台作业节点均执行的监听 若作业处理作业服务器的文件，处理完成后删除文件，可考虑使用每个节点均执行清理任务。此类型任务实现简单，且无需考虑全局分布式任务是否完成，请尽量使用此类型监听器。
步骤：
 定义监听器  public class MyElasticJobListener implements ElasticJobListener { @Override public void beforeJobExecuted(ShardingContexts shardingContexts) { // do something ... } @Override public void afterJobExecuted(ShardingContexts shardingContexts) { // do something ... } }   将监听器作为参数传入JobScheduler  public class JobMain { public static void main(String[] args) { new JobScheduler(createRegistryCenter(), createJobConfiguration(), new MyElasticJobListener()).init(); } private static CoordinatorRegistryCenter createRegistryCenter() { CoordinatorRegistryCenter regCenter = new ZookeeperRegistryCenter(new ZookeeperConfiguration(&amp;quot;zk_host:2181&amp;quot;, &amp;quot;elastic-job-demo&amp;quot;)); regCenter.</description>
    </item>
    
    <item>
      <title>自诊断并修复分布式不稳定造成的问题</title>
      <link>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/01-lite/features/lite_job_reconcile/</link>
      <pubDate>Wed, 27 Jan 2016 16:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/01-lite/features/lite_job_reconcile/</guid>
      <description>在分布式的场景下由于网络、时钟等原因，可能导致Zookeeper的数据与真实运行的作业产生不一致，这种不一致通过正向的校验无法完全避免。需要另外启动一个线程定时校验注册中心数据与真实作业状态的一致性，即维持Elastic-Job的最终一致性。
在2.0.6之前的版本中，网络不稳定的环境下Elastic-Job有可能有的作业分片并未执行，重启一下就能修复。在2.0.6，版本中Elastic-Job在提供reconcileIntervalMinutes设置修复状态服务执行间隔分钟数，用于修复作业服务器不一致状态，默认每10分钟检测并修复一次。</description>
    </item>
    
    <item>
      <title>事件追踪</title>
      <link>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/01-lite/event_trace/</link>
      <pubDate>Tue, 27 Sep 2016 16:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/01-lite/event_trace/</guid>
      <description>Elastic-Job的Lite版和Cloud版都提供了事件追踪功能，可通过事件订阅的方式处理调度过程的重要事件，用于查询、统计和监控。Elastic-Job目前提供了基于关系型数据库两种事件订阅方式记录事件。
通过代码配置开启事件追踪 Elastic-Job-Lite在配置中提供了JobEventConfiguration，目前支持数据库方式配置。
// 初始化数据源 DataSource dataSource = ...; // 定义日志数据库事件溯源配置 JobEventConfiguration jobEventRdbConfig = new JobEventRdbConfiguration(dataSource); // 初始化注册中心 CoordinatorRegistryCenter regCenter = ...; // 初始化作业配置 LiteJobConfiguration liteJobConfig = ...; new JobScheduler(regCenter, liteJobConfig, jobEventRdbConfig).init();  具体配置方式请参见开发指南.
事件追踪的event_trace_rdb_url属性对应库自动创建JOB_EXECUTION_LOG和JOB_STATUS_TRACE_LOG两张表以及若干索引。
JOB_EXECUTION_LOG字段含义
   字段名称 字段类型 是否必填 描述     id VARCHAR(40) 是 主键   job_name VARCHAR(100) 是 作业名称   task_id VARCHAR(1000) 是 任务名称,每次作业运行生成新任务   hostname VARCHAR(255) 是 主机名称   ip VARCHAR(50) 是 主机IP   sharding_item INT 是 分片项   execution_source VARCHAR(20) 是 作业执行来源。可选值为NORMAL_TRIGGER, MISFIRE, FAILOVER   failure_cause VARCHAR(2000) 否 执行失败原因   is_success BIT 是 是否执行成功   start_time TIMESTAMP 是 作业开始执行时间   complete_time TIMESTAMP 否 作业结束执行时间    JOB_EXECUTION_LOG记录每次作业的执行历史。分为两个步骤：</description>
    </item>
    
    <item>
      <title>Elastic-Job定制化处理</title>
      <link>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/01-lite/customized_hook/</link>
      <pubDate>Tue, 27 Sep 2016 16:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/01-lite/customized_hook/</guid>
      <description>异常处理 Elastic-Job在配置中提供了JobProperties，可扩展JobExceptionHandler接口，并设置job_exception_handler定制异常处理流程，默认实现是记录日志但不抛出异常。
定制化作业处理线程池 Elastic-Job在配置中提供了JobProperties，可扩展ExecutorServiceHandler接口，并设置executor_service_handler定制线程池。</description>
    </item>
    
    <item>
      <title>实现原理</title>
      <link>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/01-lite/lite-design/</link>
      <pubDate>Thu, 28 Jan 2016 16:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/elastic-job-lite/01-lite/lite-design/</guid>
      <description>弹性分布式实现  第一台服务器上线触发主服务器选举。主服务器一旦下线，则重新触发选举，选举过程中阻塞，只有主服务器选举完成，才会执行其他任务。
 某作业服务器上线时会自动将服务器信息注册到注册中心，下线时会自动更新服务器状态。
 主节点选举，服务器上下线，分片总数变更均更新重新分片标记。
 定时任务触发时，如需重新分片，则通过主服务器分片，分片过程中阻塞，分片结束后才可执行任务。如分片过程中主服务器下线，则先选举主服务器，再分片。
 通过上一项说明可知，为了维持作业运行时的稳定性，运行过程中只会标记分片状态，不会重新分片。分片仅可能发生在下次任务触发前。
 每次分片都会按服务器IP排序，保证分片结果不会产生较大波动。
 实现失效转移功能，在某台服务器执行完毕后主动抓取未分配的分片，并且在某台服务器下线后主动寻找可用的服务器执行任务。
  注册中心数据结构 注册中心在定义的命名空间下，创建作业名称节点，用于区分不同作业，所以作业一旦创建则不能修改作业名称，如果修改名称将视为新的作业。作业名称节点下又包含4个数据子节点，分别是config, instances, sharding, servers和leader。
config节点 作业配置信息，以JSON格式存储
instances节点 作业运行实例信息，子节点是当前作业运行实例的主键。作业运行实例主键由作业运行服务器的IP地址和UUID构成。作业运行实例主键均为临时节点，当作业实例上线时注册，下线时自动清理。注册中心监控这些节点的变化来协调分布式作业的分片以及高可用。 可在作业运行实例节点写入TRIGGER表示该实例立即执行一次。
sharding节点 作业分片信息，子节点是分片项序号，从零开始，至分片总数减一。分片项序号的子节点存储详细信息。每个分片项下的子节点用于控制和记录分片运行状态。节点详细信息说明：
   子节点名 临时节点 描述     instance 否 执行该分片项的作业运行实例主键   running 是 分片项正在运行的状态
如果没有此节点，并且没有completed节点，表示该分片未运行
仅配置monitorExecution时有效   completed 否 分片项运行完成的状态
下次作业开始执行时会清理
仅配置monitorExecution时有效   failover 是 如果该分片项被失效转移分配给其他作业服务器，则此节点值记录执行此分片的作业服务器IP   misfire 否 是否开启错过任务重新执行   disabled 否 是否禁用此分片项    servers节点 作业服务器信息，子节点是作业服务器的IP地址。可在IP地址节点写入DISABLED表示该服务器禁用。 在新的cloud native架构下，servers节点大幅弱化，仅包含控制服务器是否可以禁用这一功能。为了更加纯粹的实现job核心，servers功能未来可能删除，控制服务器是否禁用的能力应该下放至自动化部署系统。</description>
    </item>
    
  </channel>
</rss>